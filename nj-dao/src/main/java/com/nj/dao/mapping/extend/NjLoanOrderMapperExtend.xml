<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nj.dao.extend.NjLoanOrderMapperExtend">
    <resultMap id="BaseResultMap" type="com.nj.model.generate.NjLoanOrder">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu Mar 09 10:51:56 CST 2017.
        -->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="order_no" jdbcType="VARCHAR" property="orderNo"/>
        <result column="user_id" jdbcType="VARCHAR" property="userId"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="period" jdbcType="INTEGER" property="period"/>
        <result column="audit_amount" jdbcType="DECIMAL" property="auditAmount"/>
        <result column="audit_period" jdbcType="INTEGER" property="auditPeriod"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="usage_id" jdbcType="VARCHAR" property="usageId"/>
        <result column="usage_desc" jdbcType="VARCHAR" property="usageDesc"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="relative_chan_id" jdbcType="VARCHAR" property="relativeChanId"/>
        <result column="agent_id" jdbcType="VARCHAR" property="agentId"/>
        <result column="product_id" jdbcType="VARCHAR" property="productId"/>
        <result column="del_flag" jdbcType="BIT" property="delFlag"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="update_date" jdbcType="TIMESTAMP" property="updateDate"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
        <result column="audit_rating" jdbcType="DECIMAL" property="auditRating"/>
    </resultMap>

    <resultMap id="NjOrderFlows" type="com.nj.model.generate.NjOrderFlows">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Thu Mar 23 12:39:42 CST 2017.
        -->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="current_process" jdbcType="VARCHAR" property="currentProcess"/>
        <result column="current_app_process" jdbcType="VARCHAR" property="currentAppProcess"/>
        <result column="current_order_state" jdbcType="INTEGER" property="currentOrderState"/>
        <result column="current_order_display_state" jdbcType="VARCHAR" property="currentOrderDisplayState"/>
        <result column="process_type" jdbcType="VARCHAR" property="processType"/>
    </resultMap>

    <sql id="select_order_column_list">
  	SELECT njlo.id AS orderId 
			,njlo.order_no AS orderNo
			,njlo.amount 
			,njlo.period as period
			,ROUND(audit_rating/12,6) as rate
			,njlo.audit_amount as auditAmount
			,njlo.audit_period as auditPeriod
			,njlo.create_date AS createDate
			,njlo.make_loans_date as makeLoansDate
			,njlo.status AS orderStatus
			,njlo.status AS status
			,njlo.after_status
			,njlo.product_id AS productId
			,njlo.product_name AS productName
			,nau.mobile
			,nau.true_name as trueName
			,nau.identify_id identifyId
			,nau.user_type userType
			,IFNULL(npc.channel_name,'自主进件') as channelName
			,njlo.is_archive as isArchive
		from nj_loan_order njlo 
		inner join nj_app_user nau on njlo.user_id = nau.id 
		left join nj_product_channel npc on njlo.channel_id = npc.id 
  </sql>

    <select id="getUserOrders"
            resultType="java.util.HashMap">
		SELECT njlo.id AS orderId
			,njlo.order_no AS orderNo
			,njlo.amount AS applyAmount
			,njlo.period AS applyPeriod
			,njlo.create_date AS createDate
			,njlo.status AS status
			,njlo.audit_amount AS auditAmount
			,njlo.audit_period AS auditPeriod
			,njlo.audit_rating AS auditRate
			,njp.product_name AS productName
			,njp.id AS productId
			,njp.default_fee AS defaultRate
			,njp.product_code AS productCode
		FROM nj_loan_order njlo
		INNER JOIN nj_product njp ON njp.id = njlo.product_id
		WHERE njlo.user_id = #{accountId, jdbcType=VARCHAR}
    	order by createDate desc LIMIT #{start,jdbcType=INTEGER},#{rowNum,jdbcType=INTEGER} 
	</select>

	<select id="getUserOrdersByCompany"
            resultType="java.util.HashMap">
            SELECT
				njlo.id AS orderId,
				njlo.order_no AS orderNo,
				njlo.amount AS applyAmount,
				njlo.period AS applyPeriod,
				njlo.create_date AS createDate,
				njlo. STATUS AS status,
				njlo.audit_amount AS auditAmount,
				njlo.audit_period AS auditPeriod,
				njlo.audit_rating AS auditRate,
				njp.product_name AS productName,
				njp.id AS productId,
				njp.default_fee AS defaultRate,
				njp.product_code AS productCode
			FROM
				nj_loan_order njlo
			INNER JOIN nj_product njp ON njp.id = njlo.product_id AND njlo.user_id = #{accountId, jdbcType=VARCHAR}
			INNER JOIN nj_coporate nc ON nc.id = njlo.company_id AND nc.compan_code = #{companyCode}
			order by createDate desc LIMIT #{start,jdbcType=INTEGER},#{rowNum,jdbcType=INTEGER} 
	</select>

    <select id="getOrderDetailMap" parameterType="java.lang.String"
            resultType="java.util.HashMap">
		SELECT njlo.id AS orderId
			,njlo.order_no AS orderNo
			,njlo.amount AS applyAmount
			,njlo.period AS applyPeriod
			,njlo.create_date AS createDate
			,njlo.audit_amount AS auditAmount
			,njlo.audit_period AS auditPeriod
			,njlo.audit_rating AS auditRate
			,njlo.audit_service_rating AS auditServiceRate
			,njlo.ge_agcy_advice AS geAgcyAdvice
			,njlo.funds_use AS fundsUse
			,njlo.enterprise_case AS enterpriseCase
			,njlo.project_content AS projectContent
			,njlo.status AS status
			,dict.label_text as repayWay
			,njlo.lend_method as lend_method_eng
			,case njlo.lend_method  when 'LEND_ONL' then '线上' 
			when 'LEND_OFF' then '线下' 
			else '未知' END AS lendMethod 
			,njp.id AS productId
			,njp.product_name AS productName
			,njp.product_code AS productCode
			,njlo.repay_way AS repayType
			,agent.id AS commissionerId
			,agent.NAME AS commissionerName
			,agent.channel_acct AS commissionerMobile
			,njlo.relative_chan_id AS subChannelId
			,njlo.channel_id AS channelId
			,njp.product_code AS productCode
			,njlo.usage_id as usageId,
			njlo.usage_desc as usageDesc,
			pdt.template_id as templateId
		FROM nj_loan_order njlo
		INNER JOIN nj_product njp ON njlo.product_id = njp.id
		INNER JOIN nj_product_temp pdt ON njp.id = pdt.product_id
		LEFT JOIN nj_channel_relative agent ON njlo.agent_id = agent.id
		LEFT JOIN sys_dict dict ON njlo.repay_way = dict.value and (dict.type = 'WDCPHKFS' or dict.type = 'CPHKFS')
		WHERE njlo.id = #{orderId, jdbcType=VARCHAR}
	</select>

    <!-- 后台订单begin -->
    <!-- 过滤订单
    必填- 公司ID
    -->

    <select id="getOrdsByStatus" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT distinct njlo.id AS orderId
        ,njlo.order_no AS orderNo
        ,njlo.amount
        ,njlo.audit_amount as auditAmount
        ,njlo.audit_period as auditPeriod
        ,njlo.audit_rating as auditRating
        ,njlo.ge_agcy_advice AS geAgcyAdvice
        ,njlo.funds_use AS fundsUse
        ,njlo.enterprise_case AS enterpriseCase
        ,njlo.project_content AS projectContent
        ,np.non_recu_fee as feePayment
        ,njlo.status as status
        ,njlo.user_id as userId
        ,njau.user_id as openUserId
        ,njlo.product_id as productId
        ,njlo.repay_way as repayWay
        ,np.open_product_id as openProductId
        ,np.product_code as productCode

        FROM
        nj_loan_order njlo
        inner join nj_app_user njau
        on 1= 1
        <if test="status != null">
            and njlo.status = #{status,jdbcType=VARCHAR}
        </if>
        <if test="lendMethod != null">
            and njlo.lend_method = #{lendMethod,jdbcType=VARCHAR}
        </if>
        and njlo.user_id = njau.id
        inner join nj_product np
        on np.id = njlo.product_id
    </select>

    <select id="selectOrdersListPage" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        #{start,jdbcType=VARCHAR} start
        ,pft.taskins_id taskinsid
        ,njlo.id AS orderId
        ,njlo.order_no AS orderNo
        ,njlo.amount
        ,njlo.period as period
        ,njlo.create_date AS createDate
        ,njlo.status AS status
        ,njp.id AS productId
        ,njp.product_name AS productName
        ,njp.product_code AS productCode
        ,nof.current_order_display_state AS orderStatus
        ,nof.current_process As currentProcess
        ,ifnull(noul.old_status,0)
        ,nof2.current_order_display_state as oldStatus
        ,nau.mobile
        ,nau.true_name as trueName
        ,nau.identify_id as identifyId
        from nj_loan_order njlo

        left join nj_product njp
        on njlo.product_id = njp.id

        left join nj_app_user nau
        on njlo.user_id = nau.id

        left join nj_order_flows nof
        on njlo.status = nof.current_order_state

        left join nj_order_update_log noul
        on njlo.order_no = noul.order_id
        and njlo.status = noul.update_status
        and noul.id = (select id from nj_order_update_log where
        order_id = njlo.order_no
        order by update_date desc limit 0,1
        )

        left join nj_order_flows nof2
        on ifnull(noul.old_status,0) = nof2.current_order_state

        left join process_form pf
        on njlo.id = pf.entity_id

        left join process_form_taskins pft
        on pf.id = pft.process_form_id

        WHERE source_order_no is null
        <if test="isAdmin == 'false'">
            AND EXISTS
            (SELECT 'x' FROM nj_product_user npu
            WHERE njlo.product_id = npu.product_id
            AND npu.user_id = #{userId,jdbcType=VARCHAR}
            )
        </if>
        <if test="coporateId != null">
            AND EXISTS
            (select 'x' from nj_corp_prod ncp
            where njlo.product_id = ncp.product_id
            and ncp.corporate_id = #{coporateId,jdbcType=VARCHAR}
            )
        </if>
        <if test="keyword != null and keyword != ''">
            and
            ( nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            )
        </if>
        <if test="orderNo != null and orderNo != ''">
            and njlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        <if test="productName != null and productName != ''">
            and njp.product_name like concat('%',#{productName,jdbcType=VARCHAR},'%')
        </if>
        <if test="orderState != null and orderState != ''">
            and nof.current_order_display_state = #{orderState,jdbcType=VARCHAR}
        </if>
        <!-- 	<if test="orderStatus != null and orderStatus != ''">
                 and nof.current_order_state = #{orderStatus,jdbcType=VARCHAR}
            </if> -->
        <if test="orderOper != null  and orderOper != ''">
            <if test="orderOper == 'canHandle'">
                and exists
                (
                select 'x' from process_taskins_user ptu
                where pft.taskins_id=ptu.taskins_id
                and ptu.hand_user=#{userId,jdbcType=VARCHAR}
                )
            </if>
            <if test="orderOper == 'handled'">
                and exists
                (select noulz.id from nj_order_update_log noulz
                inner join
                nj_user_info nuiz
                on
                noulz.user_id = nuiz.user_mobile
                where
                nuiz.id=#{userId,jdbcType=VARCHAR}
                and noulz.order_id = njlo.order_no)
            </if>
        </if>
        order by njlo.create_date desc
    </select>

    <select id="selectOrdersListPageForThird" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        #{start,jdbcType=VARCHAR} start,
        pft.taskins_id taskinsid
        ,njlo.id AS orderId
        ,njlo.order_no AS orderNo
        ,njlo.amount
        ,njlo.period as period
        ,njlo.create_date AS createDate
        ,njlo.status AS status
        ,njp.id AS productId
        ,njp.product_name AS productName
        ,njp.product_code AS productCode
        ,nof.current_order_display_state AS orderStatus
        ,nof.current_process As currentProcess
        ,ifnull(noul.old_status,0)
        ,nof2.current_order_display_state as oldStatus
        ,nau.mobile
        ,nau.true_name as trueName
        ,nau.identify_id as identifyId
        from nj_loan_order njlo

        left join nj_product njp
        on njlo.product_id = njp.id

        left join nj_app_user nau
        on njlo.user_id = nau.id

        left join nj_order_flows nof
        on njlo.status = nof.current_order_state

        left join nj_order_update_log noul
        on njlo.order_no = noul.order_id
        and njlo.status = noul.update_status
        and noul.id = (select id from nj_order_update_log where
        order_id = njlo.order_no
        order by update_date desc limit 0,1
        )

        left join nj_order_flows nof2
        on ifnull(noul.old_status,0) = nof2.current_order_state

        left join process_form pf
        on njlo.id = pf.entity_id

        left join process_form_taskins pft
        on pf.id = pft.process_form_id

        WHERE source_order_no is not null
        <if test="isAdmin == 'false'">
            AND EXISTS
            (SELECT 'x' FROM nj_product_user npu
            WHERE njlo.product_id = npu.product_id
            AND npu.user_id = #{userId,jdbcType=VARCHAR}
            )
        </if>
        <if test="coporateId != null">
            AND EXISTS
            (select 'x' from nj_corp_prod ncp
            where njlo.product_id = ncp.product_id
            and ncp.corporate_id = #{coporateId,jdbcType=VARCHAR}
            )
        </if>
        <if test="keyword != null and keyword != ''">
            and
            ( nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            )
        </if>
        <if test="orderNo != null and orderNo != ''">
            and njlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        <if test="productName != null and productName != ''">
            and njp.product_name like concat('%',#{productName,jdbcType=VARCHAR},'%')
        </if>
        <if test="orderState != null and orderState != ''">
            and nof.current_order_display_state = #{orderState,jdbcType=VARCHAR}
        </if>
        <!-- <if test="orderStatus != null and orderStatus != ''">
             and nof.current_order_state = #{orderStatus,jdbcType=VARCHAR}
        </if> -->
        <if test="orderOper != null  and orderOper != ''">
            <if test="orderOper == 'canHandle'">
                and exists
                (
                select 'x' from process_taskins_user ptu
                where pft.taskins_id=ptu.taskins_id
                and ptu.hand_user=#{userId,jdbcType=VARCHAR}
                )
            </if>
            <if test="orderOper == 'handled'">
                and exists
                (select noulz.id from nj_order_update_log noulz
                inner join
                nj_user_info nuiz
                on
                noulz.user_id = nuiz.user_mobile
                where
                nuiz.id=#{userId,jdbcType=VARCHAR}
                and noulz.order_id = njlo.order_no)
            </if>
        </if>
        order by njlo.create_date desc
    </select>

    <select id="getOrderDetailsByNo" parameterType="java.lang.String"
            resultType="java.util.HashMap">
        select distinct
        nlo.id,
        nlo.status,
        nlo.create_date as createDate,
        nlo.order_no as orderNo,
        nlo.user_id as userId,
        nlo.amount,
        nlo.period,
        ifnull(nlo.lend_method,'LEND_ONL') as lendMethod,
        nlo.usage_id as usageId,
        nlo.usage_desc as usageDesc,
        nlo.audit_amount as auditAmount,
        nlo.audit_period as auditPeriod,
        nlo.audit_sxf as auditSxf,
        nlo.audit_rating as auditRating
        ,nlo.ge_agcy_advice AS geAgcyAdvice
        ,nlo.funds_use AS fundsUse
        ,nlo.enterprise_case AS enterpriseCase
        ,nlo.project_content AS projectContent
        ,np.product_name as productName,
        np.id as productId,
        nau.true_name as userName,
        nau.identify_id as identifyId,
        nau.mobile,
        ncr.name as channelName,
        nlo.relative_chan_id as relChanId,
        ncrp.name as commName,
        nlo.agent_id as agentId,
        ifnull(noul.old_status,1) as oldStatus,
        npc.channel_code as channelCode,
        npc.channel_name as channelCodeName
        from nj_loan_order nlo
        inner join nj_product np
        on 1=1
        <if test="orderNo != null">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        and np.id = nlo.product_id
        inner join nj_app_user nau
        on nau.id = nlo.user_id
        left join nj_product_channel npc
        on npc.id = nlo.channel_id
        left join nj_channel_relative ncr
        on nlo.relative_chan_id = ncr.id
        and ncr.account_type = 0
        left join nj_channel_relative ncrp
        on nlo.agent_id = ncrp.id
        and ncrp.account_type = 1
        left join nj_order_update_log noul
        on noul.update_status = nlo.status
        <if test="orderNo != null">
            and noul.order_id = #{orderNo,jdbcType=VARCHAR}
        </if>
        and noul.id = (select id from nj_order_update_log where
        order_id = nlo.order_no
        order by update_date desc limit 0,1
        )
    </select>

    <select id="getTradeInfo" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select
        np.reckon_model as reckonModel,
        np.non_recu_fee_type as noRecuFeeType,
        np.non_recu_fee as noRecuFee,
        np.repay_way as repayWay,
        nfc.share_rate as shareRate,
        nf.fund_name as fundName,
        nlo.audit_rating as auditRating
        from nj_product np
        inner join
        nj_loan_order nlo
        on np.id = nlo.product_id
        <if test="orderNo != null">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        <if test="orderId != null">
            and nlo.id = #{orderId,jdbcType=VARCHAR}
        </if>
        left join nj_fund_conf nfc
        on nfc.product_id = np.id
        left join nj_fund nf
        on nfc.fund_id = nf.id
    </select>
    <!--后台订单end-->

    <select id="getMaxOrder" resultMap="BaseResultMap">
	SELECT *
	FROM nj_loan_order
	ORDER BY create_date DESC limit 0
		,1
	</select>


    <select id="getListByCoporate" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select o.id,p.product_name productName,o.order_no orderNo,u.true_name userName,o.amount,o.period,o.create_date
        createDate from nj_loan_order o LEFT JOIN nj_app_user u ON
        o.user_id = u.id LEFT JOIN nj_product p ON o.product_id = p.id
        LEFT JOIN nj_corp_prod ncp on o.product_id = ncp.product_id LEFT JOIN
        nj_coporate nc ON ncp.corporate_id = nc.id
        WHERE 1=1
        <!-- and nc.id = #{coporateId} -->
        <if test="info != null and info != ''">
            and (u.true_name like CONCAT('%',#{info},'%')
            or u.mobile like CONCAT('%',#{info},'%')
            or u.identify_id like CONCAT('%',#{info},'%'))
        </if>
        <if test="orderNo != null and orderNo != ''">
            and o.order_no = #{orderNo}
        </if>
    </select>

    <select id="getLoanInfoByOrderNo" parameterType="java.util.Map"
            resultType="java.util.HashMap">
		select o.id,p.product_name productName,o.order_no orderNo,u.true_name userName,o.amount,o.period,o.create_date createDate ,
			o.usage_desc usageDesc ,o.audit_amount auditAmount ,o.audit_period auditPeriod ,
			c.channel_name AS channelName,c1.channel_name AS channelName1,c2.channel_name AS channelName2,
			r.name as relativeChan,r1.name as agentName ,nch.name as threeChannelName
			from nj_loan_order o 
			LEFT JOIN nj_app_user u ON o.user_id = u.id 
			LEFT JOIN nj_product p ON o.product_id = p.id
			LEFT JOIN nj_corp_prod ncp on o.product_id = ncp.product_id 
			LEFT JOIN nj_coporate nc ON ncp.corporate_id = nc.id
		
			LEFT JOIN nj_channel_relative r ON o.relative_chan_id = r.id 
			LEFT JOIN nj_channel_relative r1 ON o.agent_id = r1.id 
			LEFT JOIN nj_product_channel c ON o.channel_id =  c.id
			LEFT JOIN nj_product_channel c1 ON r.channel_id =  c1.id
			LEFT JOIN nj_product_channel c2 ON r1.channel_id =  c2.id

			LEFT JOIN nj_channel nch ON p.product_threechannel_id =  nch.id
			
			WHERE o.order_no = #{orderNo}
	</select>

    <!-- 渠道逻辑更改后新接口 -->
    <select id="getNewRepayObjs" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select
        npro.repay_role as repayRole,
        npro.repay_order as repayOrder,
        sd.label_text labelText,
        case
        WHEN npro.repay_role = 0 then nau.id
        WHEN npro.repay_role = 1 then npc.id
        else ncr.id
        end as userId,
        case
        WHEN npro.repay_role = 0 then nau.true_name
        WHEN npro.repay_role = 1 then npc.channel_name
        else ncr.name
        end as userName,
        case
        WHEN npro.repay_role = 0 then nau.mobile
        WHEN npro.repay_role = 1 then npc.channel_acct
        else ncr.channel_acct
        end as mobile,
        case
        WHEN npro.repay_role = 0 then nau.user_id
        WHEN npro.repay_role = 1 then npc.channel_open_id
        else ncr.channel_open_id
        end as openUserId
        from nj_prod_repay_obj npro
        inner join sys_dict sd
        on npro.repay_role = sd.value
        <if test="type != null and type != ''">
            and sd.type = #{type,jdbcType=VARCHAR}
        </if>
        inner join nj_loan_order nlo
        on 1= 1
        and nlo.product_id = npro.product_id
        <if test="orderNo != null and orderNo != ''">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        left join nj_app_user nau
        on 1 = 1
        and nau.id = nlo.user_id
        left join nj_channel_relative ncr
        on nlo.relative_chan_id = ncr.id
        left join nj_product_channel npc
        on nlo.channel_id = npc.id
        order by npro.repay_order
    </select>

    <select id="getRepayObjs" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select
        npro.repay_role as repayRole,
        npro.repay_order as repayOrder,
        sd.label_text labelText,
        case WHEN npro.repay_role = 0 then nau.id
        else nui.id
        end as userId,
        case
        WHEN npro.repay_role = 0 then nau.true_name
        else nui.user_name
        end as userName,
        case
        WHEN npro.repay_role = 0 then nau.mobile
        else nui.user_mobile
        end as mobile,
        case
        WHEN npro.repay_role = 0 then nau.user_id
        else nui.open_user_id
        end as openUserId
        from nj_prod_repay_obj npro
        inner join sys_dict sd
        on npro.repay_role = sd.value
        <if test="type != null and type != ''">
            and sd.type = #{type,jdbcType=VARCHAR}
        </if>
        inner join nj_loan_order nlo
        on 1= 1
        and nlo.product_id = npro.product_id
        <if test="orderNo != null and orderNo != ''">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        left join nj_app_user nau
        on 1 = 1
        and nau.id = nlo.user_id
        left join nj_user_info nui
        on 1 = 1
        and nui.id = nlo.agent_id or nui.id = nlo.relative_chan_id
        order by npro.repay_order
    </select>

    <select id="getNewPayee" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select
        nppo.payee_role as repayRole,
        nppo.peyee_type as payeeType,

        case
        WHEN nppo.payee_role = 0 then nau.id
        WHEN nppo.payee_role = 1 then npc.id
        else ncr.id
        end as userId,
        case
        WHEN nppo.payee_role = 0 then nau.true_name
        WHEN nppo.payee_role = 1 then npc.channel_name
        else ncr.name
        end as userName,
        case
        WHEN nppo.payee_role = 0 then nau.mobile
        WHEN nppo.payee_role = 1 then npc.channel_acct
        else ncr.channel_acct
        end as mobile,
        case
        WHEN nppo.payee_role = 0 then nau.user_id
        WHEN nppo.payee_role = 1 then npc.channel_open_id
        else ncr.channel_open_id
        end as openUserId

        from nj_prod_payee_obj nppo
        inner join nj_loan_order nlo
        on 1= 1
        and nlo.product_id = nppo.product_id
        <if test="orderNo != null and orderNo != ''">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        left join nj_app_user nau
        on 1 = 1
        and nau.id = nlo.user_id
        left join nj_channel_relative ncr
        on nlo.relative_chan_id = ncr.id
        left join nj_product_channel npc
        on nlo.channel_id = npc.id
        order by nppo.payee_role
    </select>

    <select id="getPayee" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        select
        nppo.payee_role as repayRole,
        nppo.peyee_type as payeeType,
        case WHEN nppo.payee_role = 0 then nau.id
        else nui.id
        end as userId,
        case
        WHEN nppo.payee_role = 0 then nau.true_name
        else nui.user_name
        end as userName,
        case
        WHEN nppo.payee_role = 0 then nau.mobile
        else nui.user_mobile
        end as mobile,
        case
        WHEN nppo.payee_role = 0 then nau.user_id
        else nui.open_user_id
        end as openUserId
        from nj_prod_payee_obj nppo
        inner join nj_loan_order nlo
        on 1= 1
        and nlo.product_id = nppo.product_id
        <if test="orderNo != null and orderNo != ''">
            and nlo.order_no = #{orderNo,jdbcType=VARCHAR}
        </if>
        left join nj_app_user nau
        on 1 = 1
        and nau.id = nlo.user_id
        left join nj_user_info nui
        on 1 = 1
        and nui.id = nlo.agent_id or nui.id = nlo.relative_chan_id
        order by nppo.payee_role
    </select>

    <select id="getTradeConfig" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT nf.fund_name as fundName,nf.fund_type as fundType,
        case
        when nf.lend_type = 'P2P_SELF' then true
        else false
        end
        as isSelfLend,
        case
        when nf.lend_type = 'P2P_SELF' then '自有资金'
        else '其它资金'
        end
        as fundIn,
        nui.id as userId,
        nui.open_user_id as openUserId
        ,sd.value,
        np.reckon_model as reckonModel,
        np.non_recu_fee_type as noRecuFeeType,
        np.non_recu_fee as noRecuFee,
        np.repay_way as repayWay
        from nj_fund_conf nfc
        inner join nj_fund nf
        on nfc.fund_id = nf.id
        <if test="productId != null and productId != ''">
            and nfc.product_id = #{productId,jdbcType=VARCHAR}
        </if>
        inner join nj_product np
        on np.id = nfc.product_id
        inner join nj_corp_prod ncp
        on ncp.product_id = nfc.product_id
        inner join nj_coporate_user ncu
        on ncu.coporate_id = ncp.corporate_id
        inner join nj_user_info nui
        on nui.id = ncu.user_id
        inner join sys_user_role sur
        on sur.user_id = nui.id
        and sur.role_id = 2
        left join sys_dict sd
        on sd.type ='CPPTSXF'
    </select>

    <select id="getOrderFlowsGroup"
            resultMap="NjOrderFlows">
			select * 
			from nj_order_flows 
			group by current_app_process 
			order by current_order_state asc
		</select>

    <select id="getAuditFiles" parameterType="java.lang.String"
            resultType="java.util.HashMap">
			select
				nua.id as fileId,
				nua.file_tag as fileTag
			 from 
				nj_order_update_attachment noua
				inner join
				nj_user_attachment nua
			on  noua.attachment_id = nua.id
			and noua.order_id = #{orderNo,jdbcType=VARCHAR}
		</select>

    <select id="getAdditionVersion" parameterType="java.lang.String"
            resultType="java.lang.Integer">
		SELECT 
		    MAX(t1.version)
		FROM
		    nj_addtion_info t1
		        INNER JOIN
		    nj_order_addition t2 ON t1.id = t2.addition_id
		        INNER JOIN
		    nj_loan_order t3 ON t3.id = t2.order_id AND t3.id = #{orderId,jdbcType=VARCHAR}
		</select>

    <select id="getAddition" parameterType="java.lang.String"
            resultType="java.util.HashMap">
		SELECT t2.id AS additionId
			,t2.addition AS addition
		FROM nj_order_addition t1
		INNER JOIN nj_addtion_info t2 ON t1.addition_id = t2.id
		WHERE t1.order_id = #{orderId,jdbcType = VARCHAR}
			AND t2.del_flag=0
		</select>

    <select id="getAdditionAttachmentForWeb" parameterType="java.lang.String"
            resultType="java.util.HashMap">
			select t5.id as attachmentId, t5.file_path as attachmentUrl from nj_loan_order t1 inner join nj_order_addition t2 on t1.id = t2.order_id 
			inner join nj_addtion_info t3 on t3.id=t2.addition_id 
			inner join nj_addition_attachment t4 on t4.addition_id =t3.id
			inner join nj_user_attachment t5 on t5.id= t4.attachment_id
			where t1.id=#{orderId,jdbcType = VARCHAR}
		</select>

    <select id="getAdditionAttachment" parameterType="java.lang.String"
            resultType="java.util.HashMap">
		SELECT t1.id AS attachmentId
			,t1.file_path AS attachmentUrl
			,t2.type AS 'type',
			t2.id AS id
		FROM nj_user_attachment t1
		INNER JOIN nj_addition_attachment t2 ON t1.id = t2.attachment_id
			AND t2.addition_id = #{additionId,jdbcType = VARCHAR}
			AND t2.del_flag=false
		</select>

    <update id="deleteUserAttr" parameterType="java.lang.String">
			update nj_addition_attachment set
			del_flag = 1
			where
			id =#{id} 
		</update>

    <select id="getInfo1" parameterType="java.util.Map"
            resultType="java.util.HashMap">
			select 
				p.product_name as name 
			from 
				nj_loan_order o 
			LEFT JOIN 
				nj_product p 
				on o.product_id = p.id 
			where 
				o.user_id = #{userId,jdbcType=VARCHAR} 
				and o.status not in(2,4,10,12,15) 
				and o.order_no <![CDATA[ <> ]]> #{orderNo,jdbcType=VARCHAR}
		</select>

    <select id="getInfo2" parameterType="java.util.Map"
            resultType="java.util.HashMap">
			select 
				p.product_name as name
			from nj_loan_order o 
			LEFT JOIN nj_product p 
				on o.product_id = p.id 
			where 
				o.user_id = #{userId,jdbcType=VARCHAR} 
				and o.status = 12 
				and o.order_no <![CDATA[ <> ]]> #{orderNo,jdbcType=VARCHAR}
		</select>

    <select id="getInfo3" parameterType="java.util.Map"
            resultType="java.lang.Integer">
			select count(*) from nj_loan_order where user_id = #{userId,jdbcType=VARCHAR} and status = 12
		</select>

    <select id="getInfo4" parameterType="java.util.Map"
            resultType="java.lang.Integer">
			select count(*) from nj_loan_order where user_id = #{userId,jdbcType=VARCHAR} and status in(2,4,10,15)
		</select>

    <select id="getInfo5" parameterType="java.util.Map"
            resultType="java.lang.Integer">
			select count(*) from nj_loan_order where user_id = #{userId,jdbcType=VARCHAR}
		</select>

    <select id="getToProcessLoanOrder" resultType="java.util.HashMap" parameterType="int">
			SELECT 
				lo.id orderid,p.id processid 
			FROM 
				nj_loan_order lo,
				PROCESS p,
				(SELECT product_id,MAX(product_process_version) maxVersion FROM PROCESS GROUP BY product_id) p2
			WHERE lo.status=#{status,jdbcType=INTEGER}
				AND lo.del_flag=0
				AND lo.product_id=p2.product_id
				AND p.product_id=p2.product_id
				AND p.product_process_version=p2.maxVersion
		</select>

    <select id="selectByOutOrderIdAndAppId" resultMap="BaseResultMap">
			SELECT t1.*
			FROM nj_loan_order t1
			INNER JOIN nj_product_channel t2 ON t1.product_id = t2.product_id and t2.del_flag=0
			INNER JOIN nj_channel t3 ON t2.nj_channel_id = t3.id
			INNER JOIN nj_channel_dev_account t4 ON t4.channel_id = t3.id
			WHERE t1.source_order_no = #{outOrderId,jdbcType=VARCHAR}
			AND t4.app_id = #{appId,jdbcType=VARCHAR}
		</select>

    <select id="getToCallbackOutOrder" resultMap="BaseResultMap">
        SELECT
        t1.*
        FROM
        nj_loan_order t1
        LEFT JOIN nj_order_callback_log t2 ON t1.id = t2.order_id AND t2.order_state = t1.status and t2.result = TRUE
        WHERE
        <![CDATA[
		DATE_SUB(CURDATE(), INTERVAL 7 DAY) <= date(t1.create_date) AND
		]]>
        t1.callback_url is NOT NULL
        AND t1. STATUS IN
        <foreach collection="states" item="state" index="index"
                 open="(" close=")" separator=",">
            #{state,jdbcType=INTEGER}
        </foreach>
        AND t2.id is null
        and t1.company_id=#{coporateId}
        and t1.callback_url is not null
    </select>

    <select id="getOutOrderFromChannel" resultType="java.util.HashMap">
			SELECT t4.id AS channelId
				,t5.app_id AS appId
				,t5.app_key AS appKey
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			INNER JOIN nj_product_channel t3 ON t3.product_id = t2.id
				AND t3.del_flag = 0
			INNER JOIN nj_channel t4 ON t4.id = t3.nj_channel_id
				AND t4.del_flag = 0
			INNER JOIN nj_channel_dev_account t5 ON t5.channel_id = t4.id
				AND t5.del_flag = 0
			WHERE t1.id = #{orderId,jdbcType=VARCHAR}
		</select>

    <select id="getOrderFlowCategory" resultType="java.util.HashMap">
			select current_process as currentProcess,
				current_app_process as appProcess,
				category
			from nj_order_flows
			group by category
			order by category
		</select>

    <!-- 查询所有待天府财富端生成合同的项目 -->
    <select id="getTfcfToCreateContractOrders" resultType="java.util.HashMap">
			SELECT t1.id AS orderId
			,t1.order_no AS orderNo
			,t1.amount
			,t1.audit_amount as auditAmount
			,t1.audit_period as auditPeriod
			,t1.audit_rating as auditRating
			,t1.ge_agcy_advice AS geAgcyAdvice
			,t1.funds_use AS fundsUse
			,t1.enterprise_case AS enterpriseCase
			,t1.project_content AS projectContent
			,t1.audit_sxf as feePayment
			,t1.audit_sxf_type as feeType
			,t1.status as status
			,t1.source_order_no as sourceOrderNo
			,t1.user_id as userId
			,t5.user_id as openUserId
			,t1.product_id as productId
			,t1.repay_way as repayWay
			,t2.open_product_id as openProductId
			,t2.product_code as productCode
			,t2.product_threechannel_id as productThreechannelId
			,t6.corporate_id as companyId
			,t1.channel_id as channelId
			,t1.agent_id as agentId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			INNER JOIN nj_corp_prod t6 on t6.product_id=t2.id
			INNER JOIN nj_app_user t5 on t1.user_id = t5.id
			INNER JOIN nj_product_transaction_relative t3 ON t3.product_id = t2.id
				AND t3.transaction_type = t1.relend_method
			INNER JOIN nj_product_transaction_online t4 ON t4.id = t3.transaction_id
				AND t4.contract_generation_type = 1
			WHERE t1.STATUS = 7
				AND t1.del_flag != 1
				AND t1.relend_method !=0
			GROUP BY t1.id
		</select>

    <!-- 获取订单的还款人天府财富id，主要是根据产品的交易结构获得不同的还款人id，主要有渠道还款，借款人还款和下级渠道还款 -->
    <select id="getOrderRepayUsers" resultType="java.util.HashMap">
			SELECT t1.channel_id AS orderChannelId
				,t5.tfcf_id AS channelTfcfId
				,t4.id AS channelRelativeId
				,t6.repay_role AS repayRole
				,t6.repay_order AS repayOrder
				,t7.label_text AS repayRoleText
				,t8.user_id AS borrowerTfcfId
				,CASE 
					WHEN t6.repay_role = 0
						THEN t8.user_id
					WHEN t6.repay_role = 1
						THEN t5.tfcf_id
					ELSE t5.tfcf_id
					END AS repayUserTfcfId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			LEFT JOIN nj_product_channel t3 ON t1.channel_id = t3.id
			LEFT JOIN nj_channel t4 ON t4.id = t3.nj_channel_id
			LEFT JOIN nj_channel_tfcf_act t5 ON t4.repay_account_id = t5.id 
			LEFT JOIN nj_product_transaction t12 on t12.product_id =t2.id
			LEFT JOIN nj_prod_repay_obj t6 ON t6.product_id = t12.product_id
			INNER JOIN sys_dict t7 ON t7.type = 'CPJYHKJS'
				AND t7.value = t6.repay_role
			INNER JOIN nj_app_user t8 ON t1.user_id = t8.id
			WHERE t1.id = #{orderId} AND t6.repay_order = 1
			order by repayOrder
		</select>

    <!-- 查询订单的收款账户列表 -->
    <select id="getOrderReceiptUsers" resultType="java.util.HashMap">
			SELECT t1.channel_id AS orderChannelId
				,t5.tfcf_id AS channelTfcfId
				,t4.id AS channelRelativeId
				,t6.payee_role AS receiptRole
				,t7.label_text AS receiptRoleText
				,t8.user_id AS borrowerTfcfId
				,CASE 
					WHEN t6.payee_role = 0
						THEN t8.user_id
					WHEN t6.payee_role = 1
						THEN t5.tfcf_id
					ELSE t5.tfcf_id
					END AS receiptUserTfcfId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			LEFT JOIN nj_product_channel t3 ON t1.channel_id = t3.id
			LEFT JOIN nj_channel t4 ON t4.id = t3.nj_channel_id
			LEFT JOIN nj_channel_tfcf_act t5 ON t4.repee_account_id = t5.id
			LEFT JOIN nj_product_transaction t12 on t12.product_id =t2.id
			LEFT JOIN nj_prod_payee_obj t6 ON t6.product_id = t12.product_id
			INNER JOIN sys_dict t7 ON t7.type = 'CPJYSKJS' AND t7.value = t6.payee_role
			INNER JOIN nj_app_user t8 ON t1.user_id = t8.id
			WHERE t1.id = #{orderId}
		</select>
		
		<!-- 查询订单的还款账户列表 -->
    <select id="getOrderRepaymentUsers" resultType="java.util.HashMap">
			SELECT t1.channel_id AS orderChannelId
				,t5.tfcf_id AS channelTfcfId
				,t4.id AS channelRelativeId
				,t6.repay_role AS receiptRole
				,t8.user_id AS borrowerTfcfId
				,CASE 
					WHEN t6.repay_role = 0
						THEN t8.user_id
					WHEN t6.repay_role = 1
						THEN t5.tfcf_id
					ELSE t5.tfcf_id
					END AS receiptUserTfcfId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			LEFT JOIN nj_product_channel t3 ON t1.channel_id = t3.id
			LEFT JOIN nj_channel t4 ON t4.id = t3.nj_channel_id
			LEFT JOIN nj_channel_tfcf_act t5 ON t4.repee_account_id = t5.id
			LEFT JOIN nj_product_transaction t12 on t12.product_id =t2.id
			LEFT JOIN nj_prod_repayment_obj t6 ON t6.product_id = t12.product_id
			INNER JOIN nj_app_user t8 ON t1.user_id = t8.id
			WHERE t1.id =  #{orderId}
		</select>

    <select id="getTfcfToCreateProjectOrders" resultType="java.util.HashMap">
			SELECT t1.id AS orderId
			,t1.order_no AS orderNo
			,t1.amount
			,t1.audit_amount as auditAmount
			,t1.audit_period as auditPeriod
			,t1.audit_rating as auditRating
			,t1.ge_agcy_advice AS geAgcyAdvice
			,t1.funds_use AS fundsUse
			,t1.enterprise_case AS enterpriseCase
			,t1.project_content AS projectContent
			,t1.audit_sxf as feePayment
			,t1.audit_sxf_type as feeType
			,t1.status as status
			,t1.user_id as userId
			,t1.source_order_no as sourceOrderNo
			,t5.user_id as openUserId
			,t1.product_id as productId
			,t1.repay_way as repayWay
			,t2.open_product_id as openProductId
			,t2.product_code as productCode
			,t2.product_threechannel_id as productThreechannelId
			,t6.corporate_id as companyId
			,t1.channel_id as channelId
			,t1.agent_id as agentId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			INNER JOIN nj_corp_prod t6 on t6.product_id=t2.id
			INNER JOIN nj_app_user t5 on t1.user_id = t5.id
			WHERE t1.STATUS = 9
				AND t1.del_flag != 1
			GROUP BY t1.id
		</select>

    <!-- 获取订单的合同上传方式 -->
    <select id="getOfflineOrderContractGenType" resultType="java.lang.Integer">
			select contract_generation_type from nj_product_transaction_offline t1
			inner join nj_product_transaction_relative t2 on t1.id = t2.transaction_id and transaction_type=0
			where t2.product_id=#{productId, jdbcType=VARCHAR}
		</select>

    <select id="getOnlOrderContractGenType" resultType="java.lang.Integer">
			select contract_generation_type from nj_product_transaction_online t1
			inner join nj_product_transaction_relative t2 on t1.id = t2.transaction_id and transaction_type=#{relendMethod,jdbcType=INTEGER}
			where t2.product_id=#{productId, jdbcType=VARCHAR}
		</select>

    <select id="getCertImageByOrderIdNew" resultType="java.util.HashMap">
			SELECT t3.file_path as headImage, t4.file_path as  emblemImage , t5.file_path as handCertImage
			FROM nj_order_cert t1
			INNER JOIN nj_user_cert t2 ON t1.cert_id = t2.id
			LEFT JOIN nj_user_attachment t3 ON t2.front_id = t3.id
			LEFT JOIN nj_user_attachment t4 ON t2.back_id = t4.id
			LEFT JOIN nj_user_attachment t5 ON t2.hand_cert_id = t5.id		
			WHERE t1.order_id =#{orderId,jdbcType=VARCHAR}
		</select>

    <select id="getOrderAttByIdAndType" resultType="java.lang.String">
			select file_path from nj_order_attachment t1 
			inner join nj_user_attachment t2 on t1.attach_id =t2.id and t2.business_type=#{buziType, jdbcType=INTEGER}
			where t1.order_id=#{orderId, jdbcType=VARCHAR}
		</select>

    <select id="getHuotiImageByOrderIdNew" resultType="java.lang.String">
		select t2.file_path from nj_order_huoti t1 
		inner join nj_user_attachment t2 on t1.attachment_id=t2.id
		where t1.order_id =#{orderId,jdbcType=VARCHAR} and t1.del_flag !=1
		</select>


    <select id="getOfflineLoanList" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        p.product_name as projectName,
        o.order_no as orderNo,
        u.true_name as truename,
        o.audit_amount as amount,
        ro.total_amount as totalRepayAmount,
        d.label_text as repayWay,
        o.audit_period as period,
        ro.status as repayStatus,
        ro.is_overdue as isOverdue,
        ro.create_time as repayPlanCreateTime
        FROM
        nj_loan_order o
        LEFT JOIN nj_product p
        on o.product_id = p.id
        left join nj_corp_prod ncp
        on p.id = ncp.product_id
        and ncp.corporate_id=#{coporateId,jdbcType=VARCHAR}
        left join nj_product_user npu
        on p.id = npu.product_id
        and npu.user_id = #{id,jdbcType=VARCHAR}
        and npu.role_id='8'
        LEFT JOIN nj_app_user u
        on o.user_id = u.id
        left join nj_repay_offline ro
        on o.order_no=ro.order_no
        left join sys_dict d
        on o.repay_way=d.value
        WHERE
        (o.status = 9
        or o.status = 12)
        and o.lend_method = 'LEND_OFF'
        and o.source_order_no is null
        <if test="userinfo != null and userinfo != ''">
            AND (u.true_name like CONCAT('%',#{userinfo,jdbcType=VARCHAR},'%')
            or u.mobile like CONCAT('%',#{userinfo,jdbcType=VARCHAR},'%')
            or u.identify_id like CONCAT('%',#{userinfo,jdbcType=VARCHAR},'%')
            )
        </if>
        <if test="orderNo !=null and orderNo != ''">
            AND o.order_no like concat('%',#{orderNo},'%')
        </if>
        <if test="repayStatus != null and repayStatus != ''">
            <choose>
                <when test="repayStatus == 'toRepay'">
                    and ro.status is null
                </when>
                <otherwise>
                    and ro.status = #{repayStatus,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="isOverdue != null and isOverdue != ''">
            and ro.is_overdue = #{isOverdue,jdbcType=INTEGER}
        </if>
        and o.product_id in
        <foreach item="productId" collection="idList" open="(" separator=","
                 close=")">
            #{productId, jdbcType=VARCHAR}
        </foreach>
        order by
        o.create_date desc
        limit #{start, jdbcType=INTEGER},#{length, jdbcType=INTEGER}
    </select>

    <select id="getOfflineLoanListCount" parameterType="java.util.Map"
            resultType="java.lang.Integer">
        SELECT
        count(*)
        FROM
        nj_loan_order o
        LEFT JOIN nj_product p
        on o.product_id = p.id
        left join nj_corp_prod ncp
        on p.id = ncp.product_id
        and ncp.corporate_id=#{coporateId,jdbcType=VARCHAR}
        left join nj_product_user npu
        on p.id = npu.product_id
        and npu.user_id = #{id,jdbcType=VARCHAR}
        and npu.role_id='8'
        LEFT JOIN nj_app_user u
        on o.user_id = u.id
        left join nj_repay_offline ro
        on o.order_no=ro.order_no
        left join sys_dict d
        on o.repay_way=d.value
        WHERE
        (o.status = 9
        or o.status = 12)
        and o.lend_method = 'LEND_OFF'
        and o.source_order_no is null
        <if test="userinfo != null and userinfo != ''">
            AND (u.true_name like concat('%',#{userinfo,jdbcType=VARCHAR},'%')
            or u.mobile like concat('%',#{userinfo,jdbcType=VARCHAR},'%')
            or u.identify_id like concat('%',#{userinfo,jdbcType=VARCHAR},'%')
            )
        </if>
        <if test="orderNo !=null and orderNo != ''">
            AND o.order_no like concat('%',#{orderNo},'%')
        </if>
        <if test="repayStatus != null and repayStatus != ''">
            <choose>
                <when test="repayStatus == 'toRepay'">
                    and ro.status is null
                </when>
                <otherwise>
                    and ro.status = #{repayStatus,jdbcType=VARCHAR}
                </otherwise>
            </choose>
        </if>
        <if test="isOverdue != null and isOverdue != ''">
            and ro.is_overdue = #{isOverdue,jdbcType=INTEGER}
        </if>
        and o.product_id in
        <foreach item="id" collection="idList" open="(" separator=","
                 close=")">
            #{id, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getThreeOfflineLoanList" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT p.product_name as projectName, o.order_no as tfdRequestId,u.true_name as truename,
        o.audit_amount as amount,o.audit_period as period,o.create_date as createTime ,c.name as threeChannelName FROM
        nj_loan_order o
        LEFT JOIN nj_product p on o.product_id = p.id
        LEFT JOIN nj_app_user u on o.user_id = u.id
        LEFT JOIN nj_channel c on p.product_threechannel_id = c.id
        WHERE o.status = 12 and o.lend_method = 'LEND_OFF' and o.source_order_no is not null
        <if test="userinfo !=null">
            AND (u.true_name like #{userinfo} or u.mobile like #{userinfo} or u.identify_id like #{userinfo})
        </if>
        <if test="tfdRequestId !=null">
            AND order_no like #{tfdRequestId}
        </if>
        and o.product_id in
        <foreach item="id" collection="idList" open="(" separator=","
                 close=")">
            #{id, jdbcType=VARCHAR}
        </foreach>
        order by o.create_date desc limit #{start, jdbcType=INTEGER},#{length, jdbcType=INTEGER}
    </select>

    <select id="getThreeOfflineLoanListCount" parameterType="java.util.Map"
            resultType="java.lang.Integer">
        SELECT count(*) FROM nj_loan_order o
        LEFT JOIN nj_product p on o.product_id = p.id
        LEFT JOIN nj_app_user u on o.user_id = u.id
        WHERE o.status = 12 and o.lend_method = 'LEND_OFF' and o.source_order_no is not null
        <if test="userinfo !=null">
            AND (u.true_name like #{userinfo} or u.mobile like #{userinfo} or u.identify_id like #{userinfo})
        </if>
        <if test="tfdRequestId !=null">
            AND order_no like #{tfdRequestId}
        </if>
        and o.product_id in
        <foreach item="id" collection="idList" open="(" separator=","
                 close=")">
            #{id, jdbcType=VARCHAR}
        </foreach>
    </select>

    <select id="getThreeChennelName" parameterType="java.util.Map"
            resultType="java.util.HashMap">
 		select nch.name
			from nj_loan_order o 
			LEFT JOIN nj_product p ON o.product_id = p.id
			LEFT JOIN nj_channel nch ON p.product_threechannel_id =  nch.id
			WHERE o.order_no = #{tfdRequestId}
	</select>

    <select id="getOldCertHeadImgInner" parameterType="java.lang.String"
            resultType="java.util.Map">
		select t1.file_path AS url,t1.create_date as createDate from nj_user_attachment t1
		inner join nj_loan_order t2 on t1.bussness_id=t2.user_id and t1.business_type=9001
		where t2.id=#{orderId, jdbcType=VARCHAR} order by createDate desc limit 0,1;
	</select>

    <select id="getOldCertBackImgInner" parameterType="java.lang.String"
            resultType="java.util.Map">
		select t1.file_path AS url,t1.create_date as createDate from nj_user_attachment t1
		inner join nj_loan_order t2 on t1.bussness_id=t2.user_id and t1.business_type=9002
		where t2.id=#{orderId, jdbcType=VARCHAR} order by createDate desc limit 0,1;
	</select>


    <select id="getOldCertHandImgInner" parameterType="java.lang.String"
            resultType="java.util.Map">
		select t1.file_path AS url,t1.create_date as createDate from nj_user_attachment t1
		inner join nj_loan_order t2 on t1.bussness_id=t2.user_id and t1.business_type=9007
		where t2.id=#{orderId, jdbcType=VARCHAR} order by createDate desc limit 0,1;
	</select>

    <select id="selectOnlDealNoUserConfirmOrders"
            resultMap="com.nj.dao.NjLoanOrderMapper.BaseResultMap">
		select  t1.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id
		inner join nj_product_transaction_online t4 on t3.transaction_id=t4.id 
		where t1.status=9 and t4.is_online_sign=0 and t1.source_order_no is not null and t1.relend_method=1
	</select>

    <select id="selectOffDealNoUserConfirmOrders"
            resultMap="com.nj.dao.NjLoanOrderMapper.BaseResultMap">
		select  t1.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id
		inner join nj_product_transaction_offline t4 on t3.transaction_id=t4.id  
		where t1.status=12 and t4.is_online_sign=0 and t1.source_order_no is not null and t1.relend_method=0
	</select>

    <select id="selectOffTrasanction"
            resultMap="com.nj.dao.NjProductTransactionOfflineMapper.BaseResultMap">
		select  t4.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id and t3.transaction_type=t1.relend_method
		inner join nj_product_transaction_offline t4 on t3.transaction_id=t4.id  
		where t1.id=#{orderId, jdbcType=VARCHAR} and t1.relend_method=0
	</select>

    <select id="selectOnlTrasanction"
            resultMap="com.nj.dao.NjProductTransactionOnlineMapper.BaseResultMap">
		select  t4.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id and t3.transaction_type=t1.relend_method
		inner join nj_product_transaction_online t4 on t3.transaction_id=t4.id  
		where t1.id=#{orderId, jdbcType=VARCHAR} 
	</select>

    <select id="selectOrderAuditorName" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT 
		    t1.user_name, tmp.update_date
		FROM
		    nj_user_info t1
		        INNER JOIN
		    (SELECT 
		        user_id, update_date
		    FROM
		        nj_order_update_log
		    WHERE
		        order_id = #{orderNo, jdbcType=VARCHAR}
		            AND old_status = 3
		            AND update_status = 5) tmp ON t1.user_mobile = tmp.user_id
		ORDER BY tmp.update_date DESC
		LIMIT 0 , 1
	</select>
    <select id="selectOrderRecheckerName" resultType="java.lang.String" parameterType="java.lang.String">
		SELECT 
		    t1.user_name, tmp.update_date
		FROM
		    nj_user_info t1
		        INNER JOIN
		    (SELECT 
		        user_id, update_date
		    FROM
		        nj_order_update_log
		    WHERE
		        order_id = #{orderNo, jdbcType=VARCHAR}
		            AND old_status = 5
		            AND update_status = 7) tmp ON t1.user_mobile = tmp.user_id
		ORDER BY tmp.update_date DESC
		LIMIT 0 , 1
	</select>

    <select id="selectOfflineNeedSignCallbackOrders" resultMap="com.nj.dao.NjLoanOrderMapper.BaseResultMap">
		select  t1.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id and t3.transaction_type=t1.relend_method and t3.transaction_type=0
		inner join nj_product_transaction_offline t4 on t3.transaction_id=t4.id 
		where t1.status=7 and t4.is_online_sign=1;
	</select>

    <select id="selectOfflineNoSignCallbackOrders" resultMap="com.nj.dao.NjLoanOrderMapper.BaseResultMap">
		select  t1.* from nj_loan_order t1 
		inner join nj_product t2 on t1.product_id=t2.id 
		inner join nj_product_transaction_relative t3 on t2.id=t3.product_id and t3.transaction_type=t1.relend_method and t3.transaction_type=0
		inner join nj_product_transaction_offline t4 on t3.transaction_id=t4.id 
		where t1.status=7 and t4.is_online_sign=0;
	</select>

    <select id="getOrderSignTFCFContract" parameterType="java.lang.String" resultType="java.util.Map">
		select t4.contract_generation_type as onlineContractType, t6.contract_generation_type as offlineContractType from nj_loan_order t1
		inner join nj_product t2 on t2.id=t1.product_id
		left join nj_product_transaction_relative t3 on t3.product_id=t2.id and t1.relend_method=1
		left join nj_product_transaction_online t4 on t4.id= t3.transaction_id  and t4.is_del !=1
		left join nj_product_transaction_relative t5 on t5.product_id=t2.id and t1.relend_method=0
		left join nj_product_transaction_offline t6 on t6.id=t5.transaction_id   and t6.is_del !=1
		where t1.order_no=#{orderNo, jdbcType=VARCHAR}
	</select>

    <select id="getOrderContractBaseParams" parameterType="java.lang.String" resultType="java.util.Map">
			SELECT t1.id AS orderId
			,t1.order_no AS orderNo
			,t1.amount
			,t1.audit_amount as auditAmount
			,t1.audit_period as auditPeriod
			,t1.audit_rating as auditRating
			,t1.audit_service_rating as auditServiceRating
			,t1.charge_fee_rate as chargeFeeRate
			,t1.fix_rate as fixRate
			,t1.fee_rate as feeRate
			,t1.contract_rate as contractRate
			,t1.ge_agcy_advice AS geAgcyAdvice
			,t1.funds_use AS fundsUse
			,t1.enterprise_case AS enterpriseCase
			,t1.project_content AS projectContent
			,t1.audit_sxf as feePayment
			,t1.audit_sxf_type as feeType
			,t1.status as status
			,t1.source_order_no as sourceOrderNo
			,t1.user_id as userId
			,t5.user_id as openUserId
			,t1.product_id as productId
			,t1.repay_way as repayWay
			,t2.open_product_id as openProductId
			,t2.product_code as productCode
			,t2.product_threechannel_id as productThreechannelId
			,'de48a37349524bfba310582397364d3f' as companyId
			,t1.channel_id as channelId
			,t1.agent_id as agentId
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			INNER JOIN nj_app_user t5 on t1.user_id = t5.id
			WHERE t1.order_no=#{orderNo, jdbcType=VARCHAR}
			GROUP BY t1.id
	</select>

    <select id="getSignParam" parameterType="java.lang.String" resultType="java.util.Map">
		select t4.is_online_sign as onlineOrderSign, ifnull(t6.is_online_sign,0) as offlineOrderSign from nj_loan_order t1
		inner join nj_product t2 on t1.product_id=t2.id
		left join nj_product_transaction_relative t3 on t3.product_id=t2.id and t3.transaction_type=t1.relend_method
		left join nj_product_transaction_online t4 on t3.transaction_id=t4.id 
		left join nj_product_transaction_relative t5 on t5.product_id=t2.id and t5.transaction_type=t1.relend_method
		left join nj_product_transaction_offline t6 on t5.transaction_id=t6.id 
		where t1.order_no=#{orderNo, jdbcType=VARCHAR}
	</select>


    <select id="getOrderTfcfProjectBaseParams" parameterType="java.lang.String" resultType="java.util.HashMap">
			SELECT t1.id AS orderId
			,IFNULL(t1.assets_code,'') AS assetsCode
			,t1.order_no AS orderNo
			,t1.amount
			,t1.audit_amount as auditAmount
			,t1.audit_period as auditPeriod
			,t1.audit_rating as auditRating
			,t1.audit_service_rating as auditServiceRating
			,t1.charge_fee_rate as chargeFeeRate
			,t1.fix_rate as fixRate
			,t1.fee_rate as feeRate
			,t1.fee_value as feeValue
			,t1.ge_agcy_advice AS geAgcyAdvice
			,t1.funds_use AS fundsUse
			,t1.enterprise_case AS enterpriseCase
			,t1.project_content AS projectContent
			,t1.audit_sxf as feePayment
			,t1.audit_sxf_type as feeType
			,t1.status as status
			,t1.user_id as userId
			,t1.source_order_no as sourceOrderNo
			,IFNULL(t1.usage_desc,'暂无') as usageDesc
			,t5.user_id as openUserId
			,t5.user_type as userType
			,t1.product_id as productId
			,t1.repay_way as repayWay
			,t2.open_product_id as openProductId
			,t2.product_code as productCode
			,t2.product_code_zj as productCodeZj
			,t2.product_threechannel_id as productThreechannelId
			,t2.loan_subject as loanSubject
			,t1.company_id as companyId
			,t1.channel_id as channelId
			,t1.agent_id as agentId
			,IFNULL(dict.label_text,'') as profession
			,t7.address
			,IFNULL(t10.label_text,'3000及以下') as familyIncome
			,t2.wd_borrow_type as wdBorrowType
			,t2.wd_usage_no as wdUsageNo
			FROM nj_loan_order t1
			INNER JOIN nj_product t2 ON t1.product_id = t2.id
			INNER JOIN nj_app_user t5 on t1.user_id = t5.id
			left JOIN nj_order_userinfo t6 ON t1.id = t6.order_id
			left JOIN nj_user_basic_info t7 ON t6.basic_info_id = t7.id
			LEFT JOIN sys_dict dict ON t7.own_industry = dict.`value` AND dict.type='SSHY'
			left JOIN nj_order_work t8 ON t1.id = t8.order_id 
			left JOIN nj_user_work_info t9 ON t8.work_id = t9.id
			LEFT JOIN sys_dict t10 on t9.month_income = t10.`value` AND t10.type = 'YSR'
			WHERE t1.STATUS = 10
				AND t1.del_flag != 1
				AND t1.order_no=#{orderNo, jdbcType=VARCHAR}
			GROUP BY t1.id
	</select>

    <select id="getOrderOnlineSignTFCFContract" resultType="java.lang.Integer">
		SELECT 
		    t4.contract_generation_type AS onlineContractType
		FROM
		    nj_loan_order t1
		        INNER JOIN
		    nj_product t2 ON t2.id = t1.product_id
		        LEFT JOIN
		    nj_product_transaction_relative t3 ON t3.product_id = t2.id
		        AND t1.relend_method = t3.transaction_type
		        LEFT JOIN
		    nj_product_transaction_online t4 ON t4.id = t3.transaction_id
		        AND t4.is_del != 1
		WHERE
		    t1.order_no = #{orderNo, jdbcType=VARCHAR}
	</select>

    <select id="getOrderOfflineSignTFCFContract" resultType="java.lang.Integer">
        SELECT
        t4.contract_generation_type AS offlineContractType
        FROM
        nj_loan_order t1
        INNER JOIN
        nj_product t2 ON t2.id = t1.product_id
        LEFT JOIN
        nj_product_transaction_relative t3 ON t3.product_id = t2.id
        AND t1.relend_method = t3.transaction_type
        LEFT JOIN
        nj_product_transaction_offline t4 ON t4.id = t3.transaction_id
        AND t4.is_del != 1
        WHERE
        t1.order_no = #{orderNo, jdbcType=VARCHAR}
    </select>

    <!-- 获取订单的还款人天府财富id，主要是根据产品的交易结构获得不同的还款人id，主要有渠道还款，借款人还款和下级渠道还款 -->
    <select id="getOrderRepayUser" resultType="java.util.HashMap">
			select t6.bank_code as bankCode,t6.card_type as cardType,t6.bank_name as bankName,
				t6.user_name as userName,t6.cert_no as certNo,t6.user_mobile as mobileNo,t6.card_no as cardNo  from nj_loan_order t1
				INNER JOIN nj_product t2 on t1.product_id = t2.id
				LEFT JOIN nj_prod_repay_obj t3 ON t3.product_id = t2.id
				INNER JOIN nj_app_user t4 ON t1.user_id = t4.id
				INNER JOIN nj_user_card t5 ON t1.user_id = t5.user_id 
				and t5.coporate_id = #{coporateId, jdbcType=VARCHAR}
				INNER JOIN nj_card t6 ON t5.card_id = t6.id 
				WHERE t1.order_no = #{orderNo, jdbcType=VARCHAR}
				and t3.repay_role = 0
		</select>

    <select id="getCoporateIdByOrderNo" resultType="java.lang.String">
		select t3.id from nj_loan_order t1
		LEFT JOIN nj_corp_prod t2 on t2.product_id = t1.product_id 
		LEFT JOIN nj_coporate t3 on t3.id = t2.corporate_id
		where t1.order_no = #{orderNo, jdbcType=VARCHAR}
	</select>

    <select id="getOrderApplyInfo" parameterType="java.util.Map"
            resultType="java.util.HashMap">
		select 
			nlo.amount as amount,
			nlo.period as period, 
			pt.fixed_interest_rate loanRate,
			dict.`value` as usageDesc,
			IFNULL(npc.channel_name,'自主进件') as channelName,
			dict.`value` as usageId,
			nlo.audit_period as auditPeriod,
			nlo.audit_rating as auditRating,
			nlo.repay_way as repayWay,
			d.label_text repayWayCn,
			nlo.user_id as userId,
			nlo.product_id as productId,
			pt.service_charge serviceCharge,
			nlo.status
		from nj_loan_order nlo
		left join nj_product_channel npc
		on nlo.channel_id = npc.id
		left join sys_dict d
		on nlo.repay_way=d.value
		left join nj_product_transaction pt
		on nlo.product_id=pt.product_id
		LEFT JOIN sys_dict dict ON nlo.usage_id = dict.id
		where nlo.id =  #{orderId,jdbcType=VARCHAR}
	</select>


    <select id="selectAuditInfo" parameterType="String" resultType="java.util.HashMap">
		select ord.product_name as productName, ord.id,ord.order_no orderNo,ord.status, ord.audit_amount auditAmount, ord.audit_period auditPeriod,ord.amount,ord.period,ord.audit_rating auditRating
		,ord.audit_service_rating auditServiceRating,sys.label_text as repayWay, IFNULL(ch.channel_name,'自主进件') channelName
		,IFNULL(ord.usage_desc,ord.enterprise_case) as usageDesc,ord.enterprise_case enterpriseCase,ord.audit_remarks auditRemarks
		,ord.project_content projectContent,ord.risk_grade riskGrade,ord.ge_agcy_advice geAgcyAdvice,ord.funds_use fundsUse
		from nj_loan_order ord
		left join sys_dict sys on ord.repay_way = sys.value  AND sys.del_flag = 0
		left join nj_user_car car on sys.value = car.car_type
		left join nj_product_channel ch on ord.channel_id = ch.id
		where ord.id=#{orderId}
	</select>


    <select id="selectPreLoanOrdersListPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        <include refid="select_order_column_list"/>

        <where>
            <![CDATA[(njlo.status < 3 or njlo.status = 52 or njlo.status=15)]]>
           	<if test="manageRole == null">
        		and njlo.product_id in (select product_id from nj_product_user where user_id = #{userId})
        	</if>
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                ( nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="channelIds != null">
            	and npc.nj_channel_id in
            	<foreach collection="channelIds" item="item" index="index" open="(" close=")" separator=",">
			       #{item}
			    </foreach>
            </if>
        </where>
        group by njlo.id
        order by njlo.create_date desc
    </select>
    <select id="selectAfterLoanOrdersListPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        SELECT njlo.id AS orderId 
			,njlo.order_no AS orderNo
			,njlo.amount 
			,njlo.period as period
			,ROUND(audit_rating/12,6) as rate
			,njlo.actual_amount as actualAmount
			,njlo.audit_amount as auditAmount
			,njlo.audit_period as auditPeriod
			,njlo.create_date AS createDate
			,njlo.make_loans_date as makeLoansDate
			,njlo.status AS orderStatus
			,njlo.after_status
			,njlo.product_id AS productId
			,njlo.product_name AS productName
			,nau.mobile
			,nau.true_name as trueName
			,nau.identify_id identifyId
			,IFNULL(npc.channel_name,'自主进件') as channelName
			,njlo.is_archive as isArchive
			,ub.card_number as bankCard
		from nj_loan_order njlo 
		inner join nj_app_user nau on njlo.user_id = nau.id 
		left join nj_product_channel npc on njlo.channel_id = npc.id 
		LEFT JOIN nj_user_bank_card ub ON ub.user_id = nau.id
        <where>
            (njlo.status = 12 )
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                ( nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="beginTime != null and beginTime != ''">
	                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
            </if>
            <if test="channelIds != null">
            	and npc.nj_channel_id in
            	<foreach collection="channelIds" item="item" index="index" open="(" close=")" separator=",">
			       #{item}
			    </foreach>
            </if>
            <if test="userInfoId != null and userInfoId != ''">
                and nau.channel_user_id = #{userInfoId}
            </if>
        </where>
        group by njlo.id
        order by njlo.make_loans_date desc
    </select>
    <select id="selectProcessLoanOrdersListPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        <include refid="select_order_column_list"/>
        INNER join nj_process_order_flows npof on npof.order_id=njlo.id
        <if test="manageRole == null">
        	and npof.user_id=#{userId,jdbcType=VARCHAR}
        </if>
        AND npof.process_id = #{processId,jdbcType=INTEGER}
        <where>
            <if test="processId==5">
                <![CDATA[njlo.status<4]]>
            </if>
            <if test="processId==6">
                njlo.status=5
            </if>
            <if test="processId==7">
                njlo.status=51
            </if>
            <if test="keyword != null and keyword != ''">
                and
                ( nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
        </where>
        group by njlo.id
        order by njlo.create_date desc
    </select>
    <select id="selectAllLoanOrdersListPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        <include refid="select_order_column_list"/>
        <where>
            1 = 1
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                (
                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="beginTime != null and beginTime != ''">
	                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'00:00:00')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="channelIds != null">
            	and npc.nj_channel_id in
            	<foreach collection="channelIds" item="item" index="index" open="(" close=")" separator=",">
			       #{item}
			    </foreach>
            </if>
            <if test="userInfoId != null and userInfoId != ''">
                and nau.channel_user_id = #{userInfoId}
            </if>
            group by njlo.id
            ORDER BY njlo.create_date DESC
        </where>
        limit #{start, jdbcType=INTEGER},#{length, jdbcType=INTEGER}
    </select>

    <select id="selectAllLoanOrdersCount" parameterType="java.util.Map" resultType="java.lang.Long">
        SELECT count(*)
		from nj_loan_order njlo 
		inner join nj_app_user nau on njlo.user_id = nau.id 
		left join nj_product_channel npc on njlo.channel_id = npc.id 
        <where>
            1 = 1
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                (
                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="beginTime != null and beginTime != ''">
	                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'00:00:00')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="channelIds != null">
            	and npc.nj_channel_id in
            	<foreach collection="channelIds" item="item" index="index" open="(" close=")" separator=",">
			       #{item}
			    </foreach>
            </if>
            <if test="userInfoId != null and userInfoId != ''">
                and nau.channel_user_id = #{userInfoId}
            </if>
        </where>
    </select>

    <select id="selectLoanOrdersListNumAmount" parameterType="java.util.Map" resultType="java.util.HashMap">
        select IFNULL(sum(amount),0) totalAmount ,IFNULL(sum(auditAmount),0) totalAuditAmount
        from(
        <include refid="select_order_column_list"/>
        <where>
            1 = 1
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                (
                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="beginTime != null and beginTime != ''">
	                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'00:00:00')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            <if test="channelIds != null">
            	and npc.nj_channel_id in
            	<foreach collection="channelIds" item="item" index="index" open="(" close=")" separator=",">
			       #{item}
			    </foreach>
            </if>
            <if test="userInfoId != null and userInfoId != ''">
                and nau.channel_user_id = #{userInfoId}
            </if>
        </where>
        ) t

    </select>


    <select id="selectDispatchOrderList" resultType="java.util.HashMap">
        SELECT
        distinct njlo.id AS orderId
        ,njlo.order_no AS orderNo
        ,njlo.status AS status
        ,njlo.amount AS amount
        ,njlo.period AS period
        ,njlo.create_date AS createDate
        ,njp.product_name AS productName
        ,IFNULL(bank.true_name,nau.true_name) AS trueName
        from nj_loan_order njlo
        inner join nj_app_user nau on njlo.user_id = nau.id
        inner join nj_product njp on njlo.product_id = njp.id
        LEFT JOIN nj_user_bank_card bank on bank.user_id = nau.id
        WHERE
        njlo.id in
        <foreach item="item" index="idx" collection="orderIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        GROUP BY njlo.id
    </select>

    <select id="selectProductIdsByOrderIds" resultType="String">
        SELECT distinct njlo.product_id from nj_loan_order njlo WHERE
        njlo.id in
        <foreach item="item" index="idx" collection="orderIds" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectDispatchUserListByProductIdIds" resultType="java.util.HashMap">
        select * from
        <foreach item="item" index="idx" collection="productIds" open="(" separator="UNION ALL" close=")">
            select ui.id as user_id,ui.user_name from nj_user_info as ui
            INNER JOIN sys_user_role as ur on ui.id=ur.user_id AND ur.coporate_id = #{companyId}
            INNER JOIN sys_role role ON ur.role_id = role.id AND role.role_type = #{roleType}
            INNER JOIN nj_product_user as pu on pu.user_id = ui.id and pu.product_id = #{item}
            <if test="productIds.size()==1">
                group by ui.id
            </if>
        </foreach>
        as t
        <if test="productIds.size()>1">
            group by t.user_name HAVING COUNT(user_id) != 1
        </if>
    </select>

    <select id="selectLoanOrderUserBaseInfo" parameterType="String"
            resultType="java.util.HashMap">
		SELECT
			DISTINCT
			IFNULL(bank.true_name,njau.true_name) as name,
			IFNULL(bank.id_number,njau.identify_id) as identity,
			njubi.household_register AS householdReg,
			njubi.max_education AS education,
			njubi.marr_status AS marrStatus,
			bank.card_number AS bankAccount,
			njau.mobile AS phone,
			njubi.estate_type AS estateType,
			njubi.area_code AS areaCode,
			njubi.address AS address,
			njubi.nation As nation,
			njubi.age As age,
			njubi.telephone As telephone,
			njubi.province As province,
			njubi.city As city,
			njubi.county As county,
			njubi.address_nature As addressNature,
			njubi.address_money As addressMoney,
			njau.channel_user_id as channelUserId,
			njubi.id
		FROM
			nj_order_userinfo njoui
		LEFT JOIN nj_user_basic_info njubi ON njoui.basic_info_id = njubi.id
		LEFT JOIN nj_app_user njau ON njubi.user_id = njau.id
		LEFT JOIN nj_user_bank_card bank ON bank.user_id = njau.id AND bank.del_flag = 0
		where njoui.order_id = #{orderId,jdbcType=VARCHAR}
	</select>


    <select id="getLoanOrderUserWorkInfo" parameterType="java.util.Map"
            resultType="java.util.HashMap">
		select 
			nuwi.org_nature as orgNature,
			nuwi.position as position,
			nuwi.org_name as orgName, 
			nuwi.month_income as monthIncome, 
			nuwi.org_contact as orgContact,
			nuwi.recent_work_years as workYears,
			nuwi.org_address as orgAddress,
			nuwi.department as department,
			nuwi.annual_income as annualIncome,
			nuwi.manage_income as manageIncome,
			nuwi.rent_income as rentIncome,
			nuwi.family_income as familyIncome,
			nuwi.id 
		from nj_order_work njow
		left join nj_user_work_info nuwi
		on njow.work_id = nuwi.id

		where njow.order_id = #{orderId,jdbcType=VARCHAR} order by nuwi.version desc LIMIT 1
	</select>

    <select id="getLoanOrderUserCarInfo" parameterType="java.lang.String" resultType="com.nj.model.generate.NjUserCar">
		select ur.* from nj_order_user_car our 
		INNER JOIN nj_user_car ur 
		on our.user_car_id = ur.id 
		where our.order_id = #{orderId,jdbcType=VARCHAR} 
		AND ur.del_flag = 0
		ORDER BY ur.create_date DESC LIMIT 1
	</select>

	 <select id="getUserCarList" parameterType="java.lang.String" resultType="com.nj.model.generate.NjUserCar">
		select ur.* from nj_order_user_car our 
		LEFT JOIN nj_user_car ur 
		on our.user_car_id = ur.id 
		where our.order_id = #{orderId,jdbcType=VARCHAR} 
	</select>

    <select id="getHouseAttachmentList" parameterType="java.util.Map"
            resultType="java.util.HashMap">
		select 
			njua.file_path as filePath
			
		from nj_order_house njoh
		
		left join nj_house_attachment njha
		on njoh.house_id = njha.house_id
		
		left join nj_user_attachment njua
		on njha.attachment_Id = njua.id
		
		where njoh.order_id = #{orderId,jdbcType=VARCHAR}
	</select>

    <select id="getCarAttachmentList" parameterType="java.util.Map"
            resultType="java.util.HashMap">
		select 
			njua.file_path as filePath
			
		from nj_order_user_car njouc
		
		left join nj_user_car_attachment njuca
		on njouc.user_car_id = njuca.id
		
		left join nj_user_attachment njua
		on njuca.attachment_id = njua.id
		
		where njouc.order_id = #{orderId,jdbcType=VARCHAR}
	</select>


    <select id="getOtherProductsInAudit" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        distinct njlo2.id

        FROM nj_loan_order njlo

        INNER JOIN nj_loan_order njlo2
        on njlo.user_id = njlo2.user_id

        <where>
            njlo.product_id != njlo2.product_id
            and njlo2.status in (3, 51)
            and njlo.id = #{orderId, jdbcType=VARCHAR}
        </where>
    </select>


    <select id="getOtherLoansInRepay" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        distinct njlo2.id

        FROM nj_loan_order njlo

        INNER JOIN nj_loan_order njlo2
        on njlo.user_id = njlo2.user_id

        <where>
            njlo.id != njlo2.id
            and njlo2.status = 12
            and njlo.id = #{orderId, jdbcType=VARCHAR}
        </where>
    </select>


    <select id="getLoanSuccessNum" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        count(distinct njlo2.id) as num

        FROM nj_loan_order njlo

        INNER JOIN nj_loan_order njlo2
        on njlo.user_id = njlo2.user_id

        <where>
            njlo2.status in (11, 12, 99)
            and njlo.id = #{orderId, jdbcType=VARCHAR}
        </where>
    </select>


    <select id="getLoanRejectNum" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        count(distinct njlo2.id) as num

        FROM nj_loan_order njlo

        INNER JOIN nj_loan_order njlo2
        on njlo.user_id = njlo2.user_id

        <where>
            njlo2.status in (4, 52)
            and njlo.id = #{orderId, jdbcType=VARCHAR}
        </where>
    </select>


    <select id="getLoanNum" parameterType="java.util.Map"
            resultType="java.util.HashMap">
        SELECT
        count(distinct njlo2.id) as num

        FROM nj_loan_order njlo

        INNER JOIN nj_loan_order njlo2
        on njlo.user_id = njlo2.user_id

        <where>
            and njlo.id = #{orderId, jdbcType=VARCHAR}
        </where>
    </select>


    <update id="saveOrderApplyInfo" parameterType="java.util.Map">
        UPDATE

        nj_loan_order nlo

        left join nj_product_channel npc
        on nlo.channel_id = npc.id

        <trim prefix="set" suffixOverrides=",">

            <if test="amount != null and amount != ''">
                nlo.amount = #{amount,jdbcType=VARCHAR},
            </if>
            <if test="period != null and period != ''">
                nlo.period = #{period,jdbcType=VARCHAR},
            </if>
            <if test="usageDesc != null and usageDesc != ''">
                nlo.usage_desc = #{usageDesc,jdbcType=VARCHAR},
            </if>
            <if test="channelName != null and channelName != ''">
                npc.channel_name = #{channelName,jdbcType=VARCHAR},
            </if>
            <if test="usageId !=null and usageId !=''">
            	nlo.usage_id = #{usageId,jdbcType=VARCHAR},
            </if>
            <if test="repayWay !=null and repayWay !=''">
            	nlo.repay_way = #{repayWay,jdbcType=VARCHAR},
            </if>
            <if test="auditRating !=null and auditRating !=''">
            	nlo.audit_rating = #{auditRating,jdbcType=VARCHAR}
            </if>
        </trim>

        where nlo.id = #{orderId,jdbcType=VARCHAR}
    </update>

    <update id="saveLoanOrderUserBaseInfo" parameterType="java.util.Map">
        UPDATE

        nj_order_userinfo njoui

        left join nj_user_basic_info njubi
        on njoui.basic_info_id = njubi.id

        left join nj_app_user njau
        on njubi.user_id = njau.id

        <trim prefix="set" suffixOverrides=",">

            <if test="name != null and name != ''">
                njau.true_name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="identity != null and identity != ''">
                njau.identify_id = #{identity,jdbcType=VARCHAR},
            </if>
            <if test="channelUserId != null and channelUserId != ''">
                njau.channel_user_id = #{channelUserId,jdbcType=VARCHAR},
            </if>
            <if test="householdReg != null and householdReg != ''">
                njubi.household_register = #{householdReg,jdbcType=VARCHAR},
            </if>
            <if test="education != null and education != ''">
                njubi.max_education = #{education,jdbcType=VARCHAR},
            </if>
            <if test="marrStatus != null and marrStatus != ''">
                njubi.marr_status = #{marrStatus,jdbcType=VARCHAR},
            </if>
            <if test="bankAccount != null and bankAccount != ''">
                njubi.bank_account = #{bankAccount,jdbcType=VARCHAR},
            </if>
            <if test="phone != null and phone != ''">
                njau.mobile = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="estateType != null and estateType != ''">
                njubi.estate_type = #{estateType,jdbcType=VARCHAR},
            </if>
            <if test="areaCode != null and areaCode != ''">
                njubi.area_code = #{areaCode,jdbcType=VARCHAR},
            </if>
            <if test="address != null and address != ''">
                njubi.address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="name != null and name != ''">
            	njubi.name=#{name,jdbcType=VARCHAR},
            </if>
            <if test="identity != null and identity != ''">
                njubi.id_card_num = #{identity,jdbcType=VARCHAR},
            </if>
            <if test="telephone !=null and telephone !=''">
            	njubi.telephone = #{telephone,jdbcType=VARCHAR},
            </if>
            <if test="province !=null and province !=''">
            	njubi.province = #{province,jdbcType=VARCHAR},
            </if>
            <if test="city !=null and city !=''">
            	njubi.city = #{city,jdbcType=VARCHAR},
            </if>
            <if test="county !=null and county !=''">
            	njubi.county = #{county,jdbcType=VARCHAR},
            </if>
            <if test="addressNature !=null and addressNature !=''">
            	njubi.address_nature = #{addressNature,jdbcType=VARCHAR},
            </if>
            <if test="addressMoney !=null and addressMoney !=''">
            	njubi.address_money = #{addressMoney,jdbcType=NUMERIC},
            </if>
        </trim>

        where njoui.order_id = #{orderId,jdbcType=VARCHAR}
    </update>

    <update id="saveLoanOrderUserWorkInfo" parameterType="java.util.Map">
        UPDATE

        nj_order_work njow

        left join nj_user_work_info nuwi
        on njow.work_id = nuwi.id

        <trim prefix="set" suffixOverrides=",">

            <if test="orgNature != null ">
                nuwi.org_nature = #{orgNature,jdbcType=VARCHAR},
            </if>
            <if test="position != null ">
                nuwi.position = #{position,jdbcType=VARCHAR},
            </if>
            <if test="orgName != null ">
                nuwi.org_name = #{orgName,jdbcType=VARCHAR},
            </if>
            <if test="monthIncome != null ">
                nuwi.month_income = #{monthIncome,jdbcType=VARCHAR},
            </if>
            <if test="orgContact != null ">
                nuwi.org_contact = #{orgContact,jdbcType=VARCHAR},
            </if>
            <if test="workYears != null ">
                nuwi.recent_work_years = #{workYears,jdbcType=VARCHAR},
            </if>
            <if test="orgAddress != null ">
                nuwi.org_address = #{orgAddress,jdbcType=VARCHAR},
            </if>
            <if test="department != null ">
                nuwi.department = #{department,jdbcType=VARCHAR},
            </if>
             <if test="annualIncome != null ">
                nuwi.annual_income = #{annualIncome,jdbcType=VARCHAR},
            </if>
             <if test="manageIncome != null and manageIncome!=''">
                nuwi.manage_income = #{manageIncome,jdbcType=DECIMAL},
            </if>
             <if test="rentIncome != null and rentIncome!=''">
                nuwi.rent_income = #{rentIncome,jdbcType=DECIMAL},
            </if>
            <if test="familyIncome != null and familyIncome!='' ">
                nuwi.family_income = #{familyIncome,jdbcType=DECIMAL},
            </if>

        </trim>

        where njow.order_id = #{orderId,jdbcType=VARCHAR}
    </update>

    <update id="saveLoanOrderUserCarInfo" parameterType="com.nj.model.generate.NjUserCar">
        UPDATE nj_user_car
        <trim prefix="set" suffixOverrides=",">
            <if test="carType != null">
                car_type = #{carType,jdbcType=VARCHAR},
            </if>
            <if test="carNumber != null">
                car_number = #{carNumber,jdbcType=VARCHAR},
            </if>
            <if test="buyPrice != null">
                buy_price = #{buyPrice,jdbcType=VARCHAR},
            </if>
            <if test="brand != null">
                brand = #{brand,jdbcType=VARCHAR},
            </if>
            <if test="buyPrice != null">
                buy_price = #{buyPrice,jdbcType=VARCHAR},
            </if>
            <if test="model != null">
                model = #{model,jdbcType=VARCHAR},
            </if>
            <if test="firstPayment != null">
                first_payment = #{firstPayment},
            </if>
              <if test="buyDate != null">
                buy_date = #{buyDate},
            </if>
       		<if test="insuranceNo != null">
       			insurance_no = #{insuranceNo},
       		</if>
       		<if test="vin  != null">
       			vin = #{vin},
       		</if>
       		<if test= "lastProjectNo != null" >
       			last_project_no = #{lastProjectNo},
       		</if>
       		<if test= "firstProjectNo != null" >
       			first_project_no = #{firstProjectNo}
       		</if>
        </trim>
        where id=#{id}
    </update>


    <update id="updateOrderAuditInfo" parameterType="java.util.Map">
        UPDATE

        nj_loan_order nlo

        left join nj_order_update_log njoul
        on nlo.id = njoul.order_id

        <trim prefix="set" suffixOverrides=",">
            <if test="amount != null and amount != ''">
                nlo.amount = #{amount,jdbcType=VARCHAR},
            </if>
            <if test="remark != null and remark != ''">
                njoul.remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="usageDesc != null and usageDesc != ''">
                nlo.usage_desc = #{usageDesc,jdbcType=VARCHAR},
            </if>
            <if test="projectContent != null and projectContent != ''">
                nlo.project_content = #{projectContent,jdbcType=VARCHAR},
            </if>
            <if test="fundsUse != null and fundsUse != ''">
                nlo.funds_use = #{fundsUse,jdbcType=VARCHAR},
            </if>
            <if test="geAgcyAdvice != null and geAgcyAdvice != ''">
                nlo.ge_agcy_advice = #{geAgcyAdvice,jdbcType=VARCHAR},
            </if>
            <if test="updateDate != null and updateDate != ''">
                njoul.update_date = #{updateDate,jdbcType=VARCHAR},
            </if>
        </trim>

        where nlo.id = #{orderId,jdbcType=VARCHAR}
        and njoul.update_status = #{updateStatus,jdbcType=VARCHAR}
    </update>

    <select id="calculateAmountBySizeAndGrade" resultType="long">
		SELECT SUM(temp.audit_amount) AS totalAmount
		FROM (
		SELECT t.audit_amount
		FROM nj_loan_order t
		WHERE t.status=#{status,jdbcType=INTEGER} AND t.asset_grade=#{grade,jdbcType=VARCHAR}
		ORDER BY t.create_date
		LIMIT #{size,jdbcType=INTEGER}) temp
	</select>

    <select id="orderGradeSummaryInfo" resultType="java.util.HashMap">
		SELECT nlo.asset_grade as grade,IFNULL(SUM(nlo.audit_amount),0) as totalAmount,count(*) totalCount
		FROM nj_loan_order nlo
		WHERE nlo.status=#{status,jdbcType=INTEGER} and nlo.asset_grade is not null
		GROUP BY nlo.asset_grade
	</select>

    <select id="orderProductGradeSummaryInfo" resultType="java.util.HashMap">
		SELECT t.asset_grade, SUM(CASE t.status WHEN #{userConfirmStatus,jdbcType=INTEGER} THEN t.audit_amount ELSE 0 end) AS userConfirmAmount, 
			SUM(CASE t.status WHEN #{buildCorporeStatus,jdbcType=INTEGER} THEN t.audit_amount ELSE 0 end) AS buildCorporeAmount,
			SUM(CASE t.status WHEN #{fundraisingSuccessStatus,jdbcType=INTEGER} THEN t.audit_amount ELSE 0 end) AS fundraisingSuccessAmount,
			IFNULL(t2.makeLoansAmount,0) as makeLoansAmount  
		FROM nj_loan_order t    
		LEFT JOIN (select t1.asset_grade,IFNULL(sum(t1.audit_amount),0) makeLoansAmount from nj_loan_order t1 where t1.company_id =#{companyId} and t1.status=#{makeLoansStatus,jdbcType=INTEGER} and datediff(t1.make_loans_date,now())=0 GROUP BY t1.asset_grade) t2     
		on t.asset_grade=t2.asset_grade  
		WHERE t.status in (#{userConfirmStatus,jdbcType=INTEGER},#{buildCorporeStatus,jdbcType=INTEGER},#{fundraisingSuccessStatus,jdbcType=INTEGER},#{makeLoansStatus,jdbcType=INTEGER}) and t.asset_grade is not null      
		and t.company_id =#{companyId}
		GROUP BY t.asset_grade
	</select>

    <select id="listProductGrade" resultType="java.util.HashMap">
        SELECT npc.id,np.product_name, sd.label_text,(fixed_interest_rate+service_charge) AS fee,npc.grade
        FROM nj_product_cycle npc
        INNER JOIN sys_dict AS sd ON npc.sys_id=sd.id
        INNER JOIN nj_product_transaction AS npt ON npt.product_id = npc.product_id
        INNER JOIN nj_product AS np ON np.id=npc.product_id AND np.state=5 AND np.del_flag=0
        INNER JOIN nj_corp_prod ON np.id = nj_corp_prod.product_id AND nj_corp_prod.corporate_id = #{coporateId}
        <if test="keyword != null">
            AND (
            np.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            or npc.grade like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
            )
        </if>
        ORDER BY np.create_date DESC, CAST(sd.value AS SIGNED INTEGER),npc.grade
    </select>

    <select id="selectByGradeStatusSize" resultMap="BaseResultMap">
		SELECT *
		FROM nj_loan_order t
		WHERE t.asset_grade=#{grade,jdbcType=VARCHAR} and t.status=#{status,jdbcType=INTEGER}
		ORDER BY t.create_date
		LIMIT #{size,jdbcType=INTEGER}
	</select>

    <update id="batchUpdateByGrade">
		UPDATE nj_loan_order t SET t.status=#{newStatus,jdbcType=INTEGER}
		WHERE t.asset_grade=#{grade,jdbcType=VARCHAR} 
		AND t.status=#{oldStatus,jdbcType=INTEGER}
		ORDER BY t.create_date 
		LIMIT #{size,jdbcType=INTEGER} 
	</update>

    <select id="listBuildCorporeDetails" resultType="java.util.HashMap">
        SELECT t.id,t.asset_grade as assetGrade,t1.product_name as productName,t.order_no as orderNo,t.tfcf_project_no
        as
        tfcfProjectNo,t.audit_rating as auditRating,t.audit_period as auditPeriod,t.audit_amount as
        auditAmount,t.status,(
        SELECT MAX(t2.update_date)
        FROM nj_order_update_log t2
        WHERE t2.order_id=t.order_no AND t2.update_status=#{userConfirmStatus,jdbcType=INTEGER}) AS userConfirmDate,(
        SELECT MAX(t3.update_date)
        FROM nj_order_update_log t3
        WHERE t3.order_id=t.order_no AND t3.update_status=#{buildCorporeStatus,jdbcType=INTEGER}) AS buildCorporeDate,(
        SELECT MAX(t3.update_date)
        FROM nj_order_update_log t3
        WHERE t3.order_id=t.order_no AND t3.update_status=12) AS completeDate
        FROM nj_loan_order t
        INNER JOIN nj_product t1 ON t.product_id=t1.id
        WHERE t.status IN
        <foreach collection="statusList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        <if test="keyword != null">
            AND (t.order_no=#{keyword,jdbcType=VARCHAR} or t1.product_name=#{keyword,jdbcType=VARCHAR} or t.asset_grade
            =#{keyword,jdbcType=VARCHAR})
        </if>
        <if test="status != null">
            AND (t.status=#{status} )
        </if>
        ORDER BY userConfirmDate DESC
    </select>

    <select id="sumFundraisingSuccessAmount" resultType="java.lang.Long">
		SELECT IFNULL(SUM(t.audit_amount),0) AS fundraisingSuccessAmount
		FROM nj_loan_order t
		WHERE t.status=#{fundraisingSuccessStatus,jdbcType=INTEGER}
	</select>

    <select id="getAmount" resultType="java.lang.Long">
        SELECT IFNull(SUM(t.audit_amount),0) AS countAmount
        FROM nj_loan_order t
        WHERE t.product_id=#{productId,jdbcType=VARCHAR}
        AND  t.create_date BETWEEN #{startDate,jdbcType=VARCHAR}
        AND  #{endDate,jdbcType=VARCHAR}
        AND t.status  not in (4,99,-1,41)
	</select>
	<select id = "getProductAmount" resultType = "java.lang.Double">
		SELECT IFNull(SUM(t.audit_amount),0) AS countAmount
        FROM nj_loan_order t
        WHERE t.product_id=#{productId,jdbcType=VARCHAR}
        AND t.status  not in (4,99,-1,41)
	</select>

    <select id="selectUserOrderAttach" resultType="java.util.Map">
		SELECT
			distinct atta.attach_id as attachId,
			atta.order_id as orderId,
			uatta.file_tag as tag
		FROM
			nj_order_attachment atta
		LEFT JOIN nj_loan_order ord ON atta.order_id = ord.id
		LEFT JOIN nj_user_attachment uatta ON atta.attach_id = uatta.id
		WHERE
			atta.order_id = #{orderId}
		ORDER BY uatta.create_date DESC 
	</select>

    <select id="selectAttachmentListByOrderId" resultType="java.util.Map">
		SELECT
			GROUP_CONCAT(distinct userAttach.id ORDER BY userAttach.update_by DESC) as id,
			userAttach.file_tag,
			GROUP_CONCAT(userAttach.file_path ORDER BY userAttach.update_by DESC) as file_path,
			dict.keyword,
			dict.business_type,
			dict.descption
		FROM
			nj_order_attachment odAttach
		INNER JOIN nj_user_attachment userAttach ON odAttach.attach_id = userAttach.id
		INNER JOIN sys_business_dict dict ON userAttach.file_tag = dict.keyword and dict.business_type = #{businessType}
		WHERE
			odAttach.order_id = #{orderId}
		AND userAttach.file_path is not NULL and userAttach.file_path != ''
		AND userAttach.del_flag = 0
		<if test="parentIds != null and parentIds != ''">
			AND FIND_IN_SET(dict.parent_id,#{parentIds})
		</if>
		GROUP BY descption
	</select>
	
	 <select id="getOrderAttListByFiletag" resultType="java.util.Map">
		SELECT
			userAttach.file_tag as fileTag,
			GROUP_CONCAT(userAttach.id ORDER BY userAttach.create_date) as attIds,
			GROUP_CONCAT(userAttach.file_path ORDER BY userAttach.create_date) as attFilePaths
		FROM
			nj_order_attachment odAttach
		INNER JOIN 
			nj_user_attachment userAttach 
		ON 
			odAttach.attach_id = userAttach.id
			AND odAttach.order_id = #{orderId,jdbcType=VARCHAR}
			AND userAttach.file_path is not NULL
			AND userAttach.file_path != ''
			AND userAttach.del_flag = 0
		WHERE
			FIND_IN_SET(userAttach.file_tag,#{fileTags,jdbcType=VARCHAR})
		GROUP BY 
			userAttach.file_tag
	</select>

    <select id="getOrderByOrderNo" resultType="com.nj.model.generate.NjLoanOrder">
		SELECT * FROM nj_loan_order WHERE order_no = #{orderNo}
	</select>

    <select id="selectOrderRefuceReson" resultType="java.util.Map">
		SELECT
			IF(a.update_status =4,'拒绝','驳回') as status,
			a.update_reason updateReason,
			a.remark,
			a.process_id as processId
		FROM
			nj_order_update_log a
		LEFT JOIN nj_loan_order b ON a.order_id = b.order_no
		WHERE
			a.order_id = #{orderId}
		AND a.update_status in(4,52) AND b.status in (4,52)
		ORDER BY
			a.update_date DESC
		LIMIT 1	
	</select>

    <!-- 获取统计基本信息 -->
    <select id="getStatisticsBase" resultType="java.util.Map">
		SELECT 
		(SELECT COUNT(*) FROM nj_loan_order WHERE company_id = #{companyId} AND DATE_FORMAT(create_date,'%Y-%d-%m')=DATE_FORMAT(NOW(),'%Y-%d-%m')) as todayOrderCount,
		(SELECT COUNT(*) FROM nj_loan_order WHERE company_id = #{companyId} AND  status =3 ) as waitAuditCount,
		(SELECT COUNT(*)  FROM nj_loan_order WHERE company_id = #{companyId} AND  DATE_FORMAT(create_date,'%Y-%d-%m')=DATE_FORMAT(NOW(),'%Y-%d-%m') and status =7) as auditPassCount,
		(SELECT SUM(amount) FROM nj_loan_order WHERE company_id = #{companyId}) as applyAmount,
		(SELECT COUNT(*)  FROM nj_loan_order WHERE status in(12,99) and company_id = #{companyId}) as successCount,
		(SELECT SUM(audit_amount)  FROM nj_loan_order WHERE status in(12,99) and company_id = #{companyId})as successAmount
		FROM nj_loan_order LIMIT 1
	</select>
    <!-- 获取各类资产统计-放款金额 -->
    <select id="selectAmountByProduct" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        IFNULL(pd.product_name, "") as productName,
        COUNT(od.id) AS total,
        100 * SUM(
        CASE
        WHEN od.status BETWEEN 7
        AND 12 THEN
        1
        ELSE
        0
        END
        ) / COUNT(od.id) AS passRate
        FROM
        nj_loan_order od
        INNER JOIN nj_product pd ON od.product_id = pd.id and pd.state=5 and od.company_id = #{companyId}
        <where>
            <if test="beginDate != null and beginDate != ''">
                AND od.create_date <![CDATA[ >= ]]> #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND od.create_date <![CDATA[ <= ]]> concat(#{endDate},'59:59:59')
            </if>
        </where>
        GROUP BY
        od.product_id
    </select>
    <!-- 获取各类资产统计-进件情况 -->
    <select id="selectCountByProduct" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        pd.product_name as productName,
        (IFNULL(SUM(od.audit_amount), 0)) AS auditAmount
        FROM
        nj_loan_order od
        INNER JOIN nj_product pd ON od.product_id = pd.id AND pd.state =5 and od.company_id = #{companyId}
        <where>
            and od.status = 12
            <if test="beginDate != null and beginDate != ''">
                AND od.create_date <![CDATA[ >= ]]> #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND od.create_date <![CDATA[ <= ]]> concat(#{endDate},'59:59:59')
            </if>
        </where>
        GROUP BY
        od.product_id
    </select>

    <!-- 进件走势统计-进件数据 -->
    <select id="selectCountByDate" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        <if test="dateFormat == null">
            date_format(od.create_date, '%Y-%m') as dateName,
        </if>
        <if test="dateFormat != null">
            date_format(od.create_date, '%Y-%m-%d') as dateName,
        </if>
        COUNT(od.id) AS total,
        100 * SUM(
        CASE
        WHEN od.status BETWEEN 7
        AND 12 THEN
        1
        ELSE
        0
        END
        ) / COUNT(od.id) AS passRate
        FROM
        nj_loan_order od INNER JOIN nj_product_channel pc ON od.channel_id = pc.id and od.company_id = #{companyId}
        <where>
            <if test="productId != null and productId != ''">
                AND od.product_id = #{productId}
            </if>
            <if test="channelId != null and channelId != ''">
                AND pc.nj_channel_id = #{channelId}
            </if>
            <if test="beginDate != null and beginDate != ''">
                AND od.create_date <![CDATA[ >= ]]> #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND od.create_date <![CDATA[ <= ]]> concat(#{endDate},'59:59:59')
            </if>
        </where>
        GROUP BY
        <if test="dateFormat != null">
            date_format(od.create_date, '%Y-%m-%d')
        </if>
        <if test="dateFormat == null">
            date_format(od.create_date, '%Y-%m')
        </if>
        ORDER BY
        od.create_date desc
    </select>
    <!-- 进件走势统计-放款金额 -->
    <select id="selectAmountByDate" parameterType="java.util.Map" resultType="java.util.Map">
        SELECT
        <if test="dateFormat == null">
            date_format(od.create_date, '%Y-%m') as dateName,
        </if>
        <if test="dateFormat != null">
            date_format(od.create_date, '%Y-%m-%d') as dateName,
        </if>

        sum(od.audit_amount) AS auditAmount
        FROM
        nj_loan_order od INNER JOIN nj_product_channel pc ON od.channel_id = pc.id and od.company_id = #{companyId}
        <where>
            <if test="productId != null and productId != ''">
                AND od.product_id = #{productId}
            </if>
            <if test="channelId != null and channelId != ''">
                AND pc.nj_channel_id = #{channelId}
            </if>
            <if test="beginDate != null and beginDate != ''">
                AND od.create_date <![CDATA[ >= ]]> #{beginDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND od.create_date <![CDATA[ <= ]]> concat(#{endDate},'59:59:59')
            </if>
        </where>
        GROUP BY
        <if test="dateFormat != null">
            date_format(od.create_date, '%Y-%m-%d')
        </if>
        <if test="dateFormat == null">
            date_format(od.create_date, '%Y-%m')
        </if>
        ORDER BY
        od.create_date desc
    </select>
    <!-- 验证订单过程是否一致 -->
    <select id="selectProcessCountByOrderId" parameterType="java.util.List" resultType="java.util.Map">
        select * from (
        SELECT
        COUNT(order_id) AS processCount
        FROM
        nj_process_order_flows
        WHERE
        process_id IN (5, 6, 7)
        AND order_id IN
        <foreach collection="orderIds" item="orderId" index="index"
                 open="(" close=")" separator=",">
            #{orderId}
        </foreach>
        GROUP BY
        order_id
        ) as tmp GROUP BY tmp.processCount
    </select>

    <select id="selectMqApiListCount" resultType="java.lang.Integer">
		SELECT count(*) FROM nj_loan_order
	</select>
    <select id="selectMqApiList" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT id FROM nj_loan_order LIMIT #{page} ,#{rowNum}
	</select>


    <select id="getTotalAmtAndNumForMatched" parameterType="java.lang.String" resultType="com.nj.core.base.util.PageData">
		SELECT
			COUNT(o.id) num,
			SUM(o.audit_amount) amt
		FROM
			nj_loan_order o
		INNER JOIN
			nj_corp_prod cp
		ON
			o.product_id=cp.product_id
		WHERE
			o.status IN (12,99)
			and o.del_flag=0
		<if test="coporateId != null and coporateId != ''">
			AND cp.corporate_id=#{coporateId,jdbcType=VARCHAR}
		</if>
	</select>

    <select id="getTotalAmtForMonth" parameterType="java.util.Map" resultType="com.nj.core.base.util.PageData">
        SELECT
        	orderdata.createDateFmt yearMonth,
        	SUM(orderdata.audit_amount) totalAmt
        FROM (
        	SELECT
        		o.audit_amount,
        		DATE_FORMAT(o.create_date,'%Y-%m') createDateFmt
       	 	FROM
        		nj_loan_order o
        	inner join
        		nj_corp_prod cp
        	on
        		o.product_id=cp.product_id
        	WHERE
        		o.del_flag=0
        		AND o.status IN (12,99)
        		AND o.create_date > #{beginDate,jdbcType=VARCHAR}
        		and o.product_id in
	        <foreach collection="productIds" item="productId" open="(" close=")" separator=",">
	            #{productId,jdbcType=VARCHAR}
	        </foreach>
	        <if test="coporateId != null and coporateId != ''">
				AND cp.corporate_id=#{coporateId,jdbcType=VARCHAR}
			</if>
        	) orderdata
        GROUP BY
        	orderdata.createDateFmt
    </select>

    <update id="updateOrderStatusById" parameterType="com.nj.model.generate.NjLoanOrder">
		update nj_loan_order set status = #{status},update_date = now() where id = #{id}
	</update>

    <select id="getLoanAfterRepayInfo" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT 
			o.id,
  			o.order_no orderNo,
  			p.product_name productName,
  			o.product_id productId,
  			p.is_overdue_auto_deduct  isOverdueAutoDeduct,
  			o.audit_amount auditAmount,
  			o.audit_period auditPeriod,
  			o.audit_rating auditRating,
  			o.audit_service_rating auditServiceRating,
  			o.audit_sxf_type auditSxfType,
  			oc.bond_type bondType, 
  			oc.bond_value bondValue,
  			o.transaction_no transactionNo,
  			o.actual_amount actualAmount,
  			u.true_name userName,
  			u.mobile userMobile,
  			d.label_text repayWay,
  			ifnull(o.make_loans_date,o.update_date) makeLoanDate,
  			bi.bank_name bankName,
  			bc.bank_code bankCode,
  			bc.card_number cardNumber
		FROM
		  	nj_loan_order o 
		LEFT JOIN 
			nj_product p 
		ON 
			o.product_id = p.id 
		LEFT JOIN 
			nj_app_user u
		ON 
			o.user_id=u.id
		LEFT JOIN 
			sys_dict d
		ON 
			o.repay_way = d.value
		left join 
			nj_user_bank_card bc
		on
			o.user_id=bc.user_id
			AND bc.del_flag=0
		left join 
			nj_bank_info bi
		on 
			bc.bank_code=bi.bank_code
		left join 
			nj_order_channel oc
		on
			o.id=oc.order_id
			and o.channel_id=oc.channel_product_id
			and oc.channel_type=1
		WHERE 
			o.order_no = #{orderNo,jdbcType=VARCHAR} 
	</select>

    <select id="selectByStatus" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT
		p.product_name productName,
		o.order_no orderNo,
		o.id orderId,
		o.status status,
		o.audit_amount auditAmount,
		o.audit_period auditPeriod,
		o.audit_rating auditRating,
		o.amount  amount,
		o.period  period,
		o.product_id  productId,
		o.create_date  createDate,
		o.repay_way  repayWayCode,
		o.make_loans_date makeLoanDate,
		u.true_name userName,
		u.mobile userMobile,
		npc.channel_code  channelCode,
		npc.channel_name  channelName,
		sd.label_text  userOfName
		FROM  nj_loan_order o
		LEFT JOIN    nj_product p   ON   o.product_id = p.id
		LEFT JOIN  nj_app_user u  ON   o.user_id=u.id
		LEFT JOIN nj_product_channel npc ON p.id = npc.product_id   and  o.channel_id=npc.id
	    left  join 	sys_dict    sd  on sd.id = o.usage_id  and  sd.type='CPYTPZ'
        where
        o.company_id = #{companyId,jdbcType=VARCHAR}
        and  o.user_id in
        <foreach collection="appUserIdList" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>

        and o.status in
        <foreach collection="statusList" index="index1" item="item1" open="(" separator="," close=")">
            #{item1}
        </foreach>
		order  by  o.create_date  desc

    </select>


    <select id="getOrderCountByCreateTime" resultType="java.util.HashMap">
        select count(*) as total, SUM(amount) as amount from nj_loan_order where create_date BETWEEN  #{startTime} and #{endTime} and  product_id =#{productId}
    </select>

    <select id="getApprovalOrderByStatus" resultType="java.util.HashMap">
        select count(*) as total, SUM(audit_amount) as amount from nj_loan_order nlo Left JOIN nj_process_order_flows npof on nlo.id = npof.order_id where npof.process_id = #{status}
        and  nlo.product_id =#{productId}  and npof.finish_time BETWEEN   #{startTime} and #{endTime}
    </select>


    <select id="getRefuseOrder" resultType="java.util.HashMap">
        select count(*) as total, SUM(audit_amount) as amount from nj_loan_order nlo where
         nlo.product_id =#{productId}  and nlo.update_date BETWEEN   #{startTime} and #{endTime}
    </select>

    <select id="getAvgMatchSecondByStatus" resultType="java.util.HashMap">
        select 
        	SUM(TIMESTAMPDIFF(SECOND,nlo.create_date,nlo.make_loans_date))/COUNT(*) avgMatchSecond
        from 
        	nj_loan_order nlo 
        where 
        	nlo.status = 12 
        	and nlo.product_id =#{productId}  
        	and nlo.make_loans_date BETWEEN   #{startTime} and #{endTime}
    </select>


	<select id="getOrderAttById" parameterType="java.util.Map" resultType="java.util.Map">
		select file_path from nj_order_attachment t1
		inner join nj_user_attachment t2 on t1.attach_id =t2.id
		where t1.order_id=#{orderId, jdbcType=VARCHAR}
		<if test="delFlag != null and delFlag != ''">
				AND t1.del_flag=#{delFlag,jdbcType=	Bit}
		</if>
	</select>

	<!-- 根据订单流程获取我的订单列表 -->
	<select id="selectMyOrderInOrderFlow" parameterType="java.util.Map" resultType="java.util.HashMap">
	        SELECT njlo.id AS orderId
				,njlo.order_no AS orderNo
				,njlo.amount
				,njlo.period as period
				,njlo.create_date AS createDate
				,njlo.status AS orderStatus
				,njlo.after_status
				,njlo.product_id AS productId
				,njlo.product_name AS productName
				,nau.mobile
				,nau.true_name as trueName
				,nau.identify_id identifyId
				,IFNULL(npc.channel_name,'自主进件') as channelName
			from nj_loan_order njlo
			INNER JOIN nj_process_order_flows flow ON njlo.id = flow.order_id AND flow.user_id = #{userId}
			inner join nj_app_user nau on njlo.user_id = nau.id
			left join nj_product_channel npc on njlo.channel_id = npc.id
        <where>
            1 = 1
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="statusList != null and statusList != ''">
                and FIND_IN_SET(njlo.status,#{statusList})
            </if>
            <if test="keyword != null and keyword != ''">
                and
                (
                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="beginTime != null and beginTime != ''">
		                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            group by njlo.id  order by createDate desc
        </where>
    </select>

    <!-- 客戶经理获取其绑定的用户订单列表 -->
	<select id="selectMyOrderByChannelUserId" parameterType="java.util.Map" resultType="java.util.HashMap">
			SELECT njlo.id AS orderId
				,njlo.order_no AS orderNo
				,njlo.amount
				,njlo.period as period
				,njlo.create_date AS createDate
				,njlo.status AS orderStatus
				,njlo.after_status
				,njlo.product_id AS productId
				,njlo.product_name AS productName
				,nau.mobile
				,nau.true_name as trueName
				,nau.identify_id identifyId
				,IFNULL(npc.channel_name,'自主进件') as channelName
			from nj_loan_order njlo
			inner join nj_app_user nau on njlo.user_id = nau.id and nau.channel_user_id = #{userId}
			left join nj_product_channel npc on njlo.channel_id = npc.id
        <where>
            1 = 1
            <if test="processStatus != null and processStatus != ''">
                and njlo.status = #{processStatus,jdbcType=INTEGER}
            </if>
            <if test="keyword != null and keyword != ''">
                and
                (
                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
                )
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and njlo.status = #{orderStatus,jdbcType=INTEGER}
            </if>
            <if test="period != null and period != ''">
                and njlo.period = #{period,jdbcType=INTEGER}
            </if>
            <if test="createDate != null and createDate != ''">
                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
            </if>
            <if test="beginTime != null and beginTime != ''">
		                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
            </if>
             <if test="endTime != null and endTime != ''">
                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
            </if>
            <if test="coporateId != null and coporateId != ''">
                and njlo.company_id = #{coporateId}
            </if>
            group by njlo.id
        </where>
    </select>

    <!-- 客戶经理获取其绑定的用户订单列表 -->
	<select id="selectMyOrderByChannelUserIdAndRoleType" parameterType="java.util.Map" resultType="java.util.HashMap">
			SELECT * FROM (
				SELECT njlo.id AS orderId
					,njlo.order_no AS orderNo
					,njlo.amount
					,njlo.period as period
					,njlo.create_date AS createDate
					,njlo.status AS orderStatus
					,njlo.after_status
					,njlo.product_id AS productId
					,njlo.product_name AS productName
					,nau.mobile
					,nau.true_name as trueName
					,nau.identify_id identifyId
					,IFNULL(npc.channel_name,'自主进件') as channelName
				from nj_loan_order njlo
				inner join nj_app_user nau on njlo.user_id = nau.id
				left join nj_product_channel npc on njlo.channel_id = npc.id
				<where>
		            1 = 1
		            <if test="processStatus != null and processStatus != ''">
		                and njlo.status = #{processStatus,jdbcType=INTEGER}
		            </if>
		            <if test="statusList != null and statusList != ''">
		                and FIND_IN_SET(njlo.status,#{statusList})
		            </if>
		            <if test="keyword != null and keyword != ''">
		                and
		                (
		                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                )
		            </if>
		            <if test="orderStatus != null and orderStatus != ''">
		                and njlo.status = #{orderStatus,jdbcType=INTEGER}
		            </if>
		            <if test="period != null and period != ''">
		                and njlo.period = #{period,jdbcType=INTEGER}
		            </if>
		            <if test="createDate != null and createDate != ''">
		                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
		                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
		            </if>
		            <if test="beginTime != null and beginTime != ''">
		                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
		            </if>
		             <if test="endTime != null and endTime != ''">
		                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
		            </if>
		            <if test="coporateId != null and coporateId != ''">
		                and njlo.company_id = #{coporateId}
		            </if>
				</where>
				UNION
				SELECT njlo.id AS orderId
					,njlo.order_no AS orderNo
					,njlo.amount
					,njlo.period as period
					,njlo.create_date AS createDate
					,njlo.status AS orderStatus
					,njlo.after_status
					,njlo.product_id AS productId
					,njlo.product_name AS productName
					,nau.mobile
					,nau.true_name as trueName
					,nau.identify_id identifyId
					,IFNULL(npc.channel_name,'自主进件') as channelName
				from nj_loan_order njlo
				INNER JOIN nj_process_order_flows flow ON njlo.id = flow.order_id AND flow.user_id = #{userId} AND njlo.status in (5,33)
				inner join nj_app_user nau on njlo.user_id = nau.id
				left join nj_product_channel npc on njlo.channel_id = npc.id
				<where>
		            1 = 1
		            <if test="processStatus != null and processStatus != ''">
		                and njlo.status = #{processStatus,jdbcType=INTEGER}
		            </if>
		            <if test="statusList != null and statusList != ''">
		                and FIND_IN_SET(njlo.status,#{statusList})
		            </if>
		            <if test="keyword != null and keyword != ''">
		                and
		                (
		                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
		                )
		            </if>
		            <if test="orderStatus != null and orderStatus != ''">
		                and njlo.status = #{orderStatus,jdbcType=INTEGER}
		            </if>
		            <if test="period != null and period != ''">
		                and njlo.period = #{period,jdbcType=INTEGER}
		            </if>
		            <if test="createDate != null and createDate != ''">
		                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
		                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
		            </if>
		             <if test="beginTime != null and beginTime != ''">
		                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
		            </if>
		             <if test="endTime != null and endTime != ''">
		                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
		            </if>
		            <if test="coporateId != null and coporateId != ''">
		                and njlo.company_id = #{coporateId}
		            </if>
				</where>
				) as temp
				GROUP BY temp.orderId order by createDate desc
    </select>

    <!-- 获取风控专员分单用户列表 -->
    <select id="selectSendOrderRiskUsersList" parameterType="java.util.Map" resultType="java.util.Map">
    	SELECT
			us.id,
			us.user_name
		FROM
			nj_user_info us
		INNER JOIN sys_user_role ur ON us.id = ur.user_id
		INNER JOIN sys_role role ON ur.role_id = role.id
		AND role.role_type = #{roleType} AND ur.coporate_id = #{companyId}
    </select>

    <select id="getOrderForRepaySituationPage" parameterType="java.lang.String" resultType="java.util.Map">
    	SELECT 
    		p.product_name productName,
    		u.true_name userName,
    		u.identify_id identifyId,
    		o.id orderId,
    		o.audit_amount auditAmount,
    		o.audit_period auditPeriod,
    		o.actual_amount actualAmount
    	FROM 
    		nj_loan_order o
		LEFT JOIN 
			nj_product p
		ON 
			o.product_id=p.id
		LEFT JOIN 
			nj_app_user u
		ON 
			o.user_id=u.id
		WHERE 
			o.order_no=#{orderNo,jdbcType=VARCHAR}
    </select>

    <select id="selectMyOrderByStatus" parameterType="java.lang.String" resultType="java.util.Map">
    	SELECT njlo.id AS orderId
				,njlo.order_no AS orderNo
				,njlo.amount
				,njlo.period as period
				,njlo.create_date AS createDate
				,njlo.status AS orderStatus
				,njlo.after_status
				,njlo.product_id AS productId
				,njlo.product_name AS productName
				,nau.mobile
				,nau.true_name as trueName
				,nau.identify_id identifyId
				,IFNULL(npc.channel_name,'自主进件') as channelName
			from nj_loan_order njlo
			inner join nj_app_user nau on njlo.user_id = nau.id
			left join nj_product_channel npc on njlo.channel_id = npc.id
			<where>
				1 = 1
	            <if test="processStatus != null and processStatus != ''">
	                and njlo.status = #{processStatus,jdbcType=INTEGER}
	            </if>
	            <if test="statusList != null and statusList != ''">
	                and FIND_IN_SET(njlo.status,#{statusList})
	            </if>
	            <if test="keyword != null and keyword != ''">
	                and
	                (
	                nau.true_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                or nau.mobile like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                or nau.identify_id like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                or njlo.order_no like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                or njlo.product_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                or npc.channel_name like CONCAT('%',#{keyword,jdbcType=VARCHAR},'%')
	                )
	            </if>
	            <if test="orderStatus != null and orderStatus != ''">
	                and njlo.status = #{orderStatus,jdbcType=INTEGER}
	            </if>
	            <if test="period != null and period != ''">
	                and njlo.period = #{period,jdbcType=INTEGER}
	            </if>
	            <if test="createDate != null and createDate != ''">
	                and njlo.create_date BETWEEN CONCAT(#{createDate,jdbcType=VARCHAR}'00:00:00') and
	                CONCAT(#{createDate,jdbcType=VARCHAR}'23:59:59')
	            </if>
	            <if test="beginTime != null and beginTime != ''">
		                and njlo.create_date &gt; CONCAT(#{beginTime,jdbcType=VARCHAR}'23:59:59')
	            </if>
	             <if test="endTime != null and endTime != ''">
	                and njlo.create_date &lt; CONCAT(#{endTime,jdbcType=VARCHAR}'00:00:00')
	            </if>
	            <if test="coporateId != null and coporateId != ''">
	                and njlo.company_id = #{coporateId}
	            </if>
	            group by njlo.id order by createDate desc
	        </where>
    </select>

    <select id="getOrderInfo" parameterType="java.lang.String" resultType="java.util.Map">
    	SELECT 
			au.true_name borrowerName ,		
			au.mobile borrewerMobile,		
			au.mial borrowerMail,			
			'身份证' borrowerCertType,		
			au.identify_id borrowerIdentityNo,		
			au.address borrowerAddress,		
			o.audit_amount loanAmt,			
			o.audit_rating yearRate,		
			o.usage_desc usageDesc,			
			o.audit_period loanPeriod,		
			d.label_text repayWay,				
			c.compan_name lender, 			
			c.address companyAddress,		
			c.regis_per_name legalRepresentative,	
			GROUP_CONCAT(ph.owner SEPARATOR ',') hourseMortgagor		
		FROM 
			nj_loan_order o
		LEFT JOIN 
			nj_app_user au
		ON 
			o.user_id=au.id
		LEFT JOIN 
			nj_corp_prod cp
		ON 
			o.product_id=cp.product_id
		LEFT JOIN 
			nj_coporate c
		ON 
			cp.corporate_id=c.id
		LEFT JOIN 
			nj_order_pawn_house ph
		ON 
			o.id=ph.order_id
		LEFT JOIN 
			sys_dict d
		ON 
			o.repay_way=d.value
		WHERE 
			o.id=#{orderId,jdbcType=VARCHAR}
    </select>
    <!-- 获得驳回列表 -->
     <select id="getProcessOrderFlows" parameterType="java.lang.String" resultType="java.util.Map">

    	select t1.process_id processId,t1.exec_orders orders,t3.process_name processName from nj_process_order_flows t1 left join nj_process_template_flows t3 on t1.process_id=t3.process_id and t3.type=1  where  t1.order_id =#{orderId} and t3.template_id=#{templateId} 
and t1.status>0 and t1.exec_orders &lt;(select t.exec_orders orders from nj_process_order_flows t  where t.order_id = #{orderId} and t.process_id =#{processId}) order by t1.exec_orders asc
    	
    </select>

    <select id="selectOrderAuditUserList" resultType="java.util.Map">
    	SELECT
			pro.process_id,
			us.user_name
		FROM
			nj_process_order_flows pro
		INNER JOIN nj_user_info us ON pro.user_id = us.id
		WHERE
			order_id = #{orderId}
		AND process_id IN (5, 6, 7);
    </select>

    
    <!-- 统计客户经理时间区间内销售总额 -->
    <select id="statisticsSellAmountForUser" resultType="java.lang.Double">
    
		select IFNULL(sum(t.audit_amount),0) sellAmount  from nj_loan_order t inner join (select t1.id  from nj_app_user t1 where t1.channel_user_id= #{userId}) t2 on t.user_id = t2.id   
		where  t.status = "12" and t.make_loans_date is not null  and (t.make_loans_date BETWEEN #{startTime} and #{endTime})  
		and t.company_id = #{companyId}
    </select>
    
    <!-- 查询 客户经理指定区间内的销售总额排行-->
    <select id="getStatisticsSell" resultType="java.util.Map">
    	select t.user_id,t.user_name,SUM(t.sell_amount) amount from nj_statistics_sell t where t.coporate_id=#{companyId}  and (t.sell_time BETWEEN #{startTime} and #{endTime})    
		group by t.user_id order by  amount desc limit 10
    </select>
    
	
	<!-- 查询 客户经理指定区间内的回款总额排行-->
    <select id="getStatisticsManagerReturn" resultType="java.util.Map">
    	select t.user_id,t.user_name,SUM(t.return_amount) amount from nj_statistics_manager_return t where t.coporate_id=#{companyId}  and (t.return_time BETWEEN #{startTime} and #{endTime})     
		group by t.user_id order by  amount desc limit 10
    </select>

   <select id="getSumAuditAmountForCompany" resultType="java.util.Map">
		 SELECT
			t.company_id AS companyId,
			t.status AS  status,
			sum(t.audit_amount) AS totalAmount,
			count(1) AS loanNum
		FROM
			nj_loan_order t
		WHERE  t.status  in
		<foreach item="item" index="index" collection="statusList"     open="(" separator="," close=")">
                        #{item}
       </foreach>

	  <if test="minAmount != null and minAmount != ''"> 
	  		and  t.audit_amount <![CDATA[ >= ]]> #{minAmount}
	  </if>
	  <if test="maxAmount != null and maxAmount != ''"> 
	 		 and  t.audit_amount <![CDATA[ < ]]> #{maxAmount}
	  </if>
		GROUP BY
			company_id;
	</select>

	<select id="getUserCountForCompany" resultType="java.util.Map">
		SELECT
			a.company_id AS companyId,
			count(a.user_id) AS loanUserCount
		FROM
			(
				SELECT
					company_id,
					user_id
				FROM
					nj_loan_order
				WHERE
					STATUS  in
				<foreach item="item" index="index" collection="statusList"     open="(" separator="," close=")">
		                        #{item}
		       </foreach>
				GROUP BY
					company_id,
					user_id
			) a
		GROUP BY
			a.company_id
	</select>

	<select id="getAuditPassOrderNumForToday" resultType="java.lang.Long"> 
		SELECT 
			COUNT(DISTINCT o.order_no) 
		FROM 
			nj_loan_order o
		INNER JOIN 
			nj_order_update_log l
		ON 
			o.order_no=l.order_id
		AND 
			o.del_flag=0
		<if test="coporateId != null and coporateId != ''">
			AND 
				o.company_id=#{coporateId,jdbcType=VARCHAR}
		</if>
		<if test="productIds != null">
			AND o.product_id IN
			<foreach collection="productIds" item="productId" separator="," open="(" close=")">
				 #{productId,jdbcType=VARCHAR}
			</foreach>
		</if>
		AND 
			l.process_id=7
		AND 
			l.update_status=7
		AND 
			l.update_date BETWEEN 
				STR_TO_DATE(DATE_FORMAT(NOW(),'%Y-%m-%d'),'%Y-%m-%d %H:%i:%s') 
			AND 
				DATE_ADD(DATE_ADD(STR_TO_DATE(DATE_FORMAT(NOW(),'%Y-%m-%d'),'%Y-%m-%d %H:%i:%s'),INTERVAL 1 DAY),INTERVAL -1 SECOND)
	</select>
	
	<select id="getMakeLoanAmtForToday" resultType="java.math.BigDecimal">
			SELECT 
				SUM(o.audit_amount) 
			FROM 
				nj_loan_order o
			WHERE 
				o.del_flag=0
			AND make_loans_date BETWEEN 
					STR_TO_DATE(DATE_FORMAT(NOW(),'%Y-%m-%d'),'%Y-%m-%d %H:%i:%s') 
				AND 
					DATE_ADD(DATE_ADD(STR_TO_DATE(DATE_FORMAT(NOW(),'%Y-%m-%d'),'%Y-%m-%d %H:%i:%s'),INTERVAL 1 DAY),INTERVAL -1 SECOND)
		<if test="coporateId != null and coporateId != ''">
			AND 
				o.company_id=#{coporateId,jdbcType=VARCHAR}
		</if>
		<if test="productIds != null">
			AND o.product_id IN
			<foreach collection="productIds" item="productId" separator="," open="(" close=")">
				 #{productId,jdbcType=VARCHAR}
			</foreach>
		</if>
	</select>
	
	<!-- 获取代偿账户 -->
	<select id="getOrderRepayUserList" resultType="java.util.Map">
		SELECT
			user_id AS userId
		FROM
			nj_prod_repay_obj
		WHERE
			product_id = #{productId}
		AND user_id IS NOT NULL
		AND user_id != '' AND repay_order = 2
	</select>
	
	<select id="getOrderAttByIdAndFileTag" resultType="com.nj.model.generate.NjOrderAttachment">
			select t1.id,t1.order_id,t1.attach_id from nj_order_attachment t1 
			inner join nj_user_attachment t2 on t1.attach_id =t2.id and t2.file_tag=#{fileTag, jdbcType=INTEGER}
			where t1.order_id=#{orderId, jdbcType=VARCHAR}
			<if test="delFlag != null and delFlag != ''">
				AND t1.del_flag=#{delFlag,jdbcType=	Bit}
			</if>
   </select>
   
	<!-- 按指定时间、状态的查询需要回调的订单-->
    <select id="getOrderCallBackByStatus" resultMap="BaseResultMap">
    	select t1.* from nj_loan_order t1   
    	LEFT JOIN nj_order_callback_log t2 ON t1.id = t2.order_id AND t2.order_state = t1.status and t2.result = TRUE  
    	where  t1.update_date  BETWEEN #{startTime} and #{endTime}  
    	and t1.status in  
        <foreach collection="states" item="state" index="index"
                 open="(" close=")" separator=",">
            #{state,jdbcType=INTEGER}
        </foreach>  
         AND t2.id is null  
        and t1.callback_url is not null
    </select>    
    
    <!-- 查询渠道商对接账号，通过订单中的channelId进行查询 -->
   	<select id="getChannelDevAccountByChannelId" resultType="com.nj.model.generate.NjChannelDevAccount">
   	
   		select t.* from nj_channel_dev_account t inner join nj_channel t1 on t.channel_id = t1.id   inner join  nj_product_channel t2  on t1.`code` = t2.channel_code  
   		where  t2.id = #{channelId}
   		   	
   	</select>
   	
   	<!-- 通过订单ID查询车辆信息 -->
   	<select id="getUsercarByOrderId" resultType="com.nj.model.generate.NjUserCar">   	
   		select t.* from nj_user_car t inner join nj_order_user_car t1 on t.id = t1.user_car_id  where t1.order_id = #{orderId} order by t.create_date desc   		   	
   	</select>

    <!-- 根据用户id和订单状态获取订单总额 -->
    <select id="selectAmountByUserId" resultType="java.lang.Double">
    	select IFNULL(SUM(audit_amount),0) from nj_loan_order where  user_id = #{userId} and status = #{status}
    </select>
	
	<!-- 查询指定时间端的回款通知 -->
	<select id = "getDeductionNoticeList" resultType="com.nj.model.generate.NjDeductionNotice" >
		select t.* from nj_deduction_notice t where t.is_notice = 0 and t.deduction_date  BETWEEN #{startTime} and #{endTime}  order by t.deduction_date desc
	</select>
	
	<!-- 通过时间段查询通用通知信息 -->
	<select id = "getCommonNoticeList" resultType="com.nj.model.generate.NjChannelRequset" >
		select t.* from nj_channel_requset t where t.is_notice = 0 and t.notice_time  BETWEEN #{startTime} and #{endTime}  order by t.notice_time desc
	</select>
	
	<!-- 通过时间段查询用户激活通知信息 -->
	<select id = "getUserActivateNotice" resultType="com.nj.model.generate.NjUserActivateNotice" >
		select t.* from nj_user_activate_notice t where t.is_notice = 0 and t.create_date  BETWEEN #{startTime} and #{endTime}  order by t.create_date desc
	</select>
	
	
	<!-- 查询能贷订单的产品id -->
    <select id="getProductIdListOfND" resultType="java.util.HashMap">
			
			SELECT
				t.order_no AS orderNo,
				t.product_id AS productId
			FROM
				nj_loan_order t
			WHERE
				t.company_id IN (
					SELECT
						njc.id
					FROM
						nj_coporate njc
					WHERE
						njc.compan_code NOT IN (1000, 1025)
				)
	</select>
	
	<select id="getTodayIncomeCount" resultType="java.lang.String">
		SELECT
			order_no
		FROM
			nj_loan_order
		WHERE
			TO_DAYS(create_date) = TO_DAYS(#{date})
		AND product_id = #{productId}
			ORDER BY create_date 
		
	</select>
	
	<select id="selectByExamp" resultType="com.nj.model.generate.NjLoanOrder">
		SELECT id,user_id ,order_no FROM nj_loan_order WHERE company_id !='de48a37349524bfba310582397364d3f';
	</select>
	
	<update id="updateSelect" parameterType="com.nj.model.generate.NjLoanOrder">
		update nj_loan_order set td_report_id = #{tdReportId} where id = #{id}
	</update>
	
	<select id="selectContractEsign" resultType="com.nj.model.generate.NjLoanOrder">
		<!-- SELECT
			order_no
		FROM
			nj_loan_order
		WHERE
			`status` IN (12,99)
		AND FIND_IN_SET(product_id,#{productIds})
		AND create_date > '2018-11-22' limit #{start},#{end} -->
		SELECT order_no FROM nj_loan_order WHERE order_no in ('100000000295112941','100000000295112757','100000000295112769','100000000295112483','100000000295112613','100000000295112722','100000000295112482','100000000295112681','100000000295112661','100000000295112911','100000000295112478','100000000295112750','100000000295112802','100000000295112670','100000000295112476','100000000295112700','100000000295112852','100000000295112576','100000000295112498','100000000295112890','100000000295112539','100000000295112563','100000000295112776','100000000295112876','100000000295112796','100000000295112533','100000000295112907','100000000295112696','100000000295112873','100000000295112531','100000000295112678','100000000295112453','100000000295112916','100000000295112896','100000000295112593','100000000295112582','100000000295112884','100000000295102584','100000000295112870','100000000295112619','100000000295112759','100000000295112530','100000000295112505','100000000295112587','100000000295112600','100000000295112491','100000000295112831','100000000295112891','100000000295112785','100000000295112934','100000000295112459','100000000295112458','100000000295112728','100000000295112811','100000000295112706','100000000295112920','100000000295112578','100000000295112675','100000000295112486','100000000295112668','100000000295112854','100000000295112637','100000000295112506','100000000295112564','100000000295112871','100000000295112817','100000000295112537','100000000295112925','100000000295112699','100000000295112544','100000000295112733','100000000295112935','100000000295112784','100000000295112872','100000000295112561','100000000295112905','100000000295112701','100000000295112825','100000000295112698','100000000295112711','100000000295112801','100000000295112915','100000000295112620','100000000295112780','100000000295112556','100000000295112752','100000000295112685','100000000295112446','100000000295112794','100000000295112543','100000000295112508','100000000295112812','100000000295112528','100000000295112729','100000000295112898','100000000295112822','100000000295112718','100000000295102587','100000000295112765','100000000295112540','100000000295112460','100000000295112821','100000000295112503','100000000295112804','100000000295112492','100000000295112499','100000000295112798','100000000295112735','100000000295102585','100000000295112746','100000000295112510','100000000295112886','100000000295112717','100000000295112462','100000000295112921','100000000295112511','100000000295112560','100000000295112754','100000000295112488','100000000295112461','100000000295112662','100000000295112557','100000000295112671','100000000295112788','100000000295112660','100000000295112742','100000000295112448','100000000295112493','100000000295112936','100000000295112737','100000000295112810','100000000295112727','100000000295112841','100000000295112634','100000000295112474','100000000295112939','100000000295112809','100000000295112570','100000000295112548','100000000295112716','100000000295112865','100000000295112572','100000000295112771','100000000295112938','100000000295112470','100000000295112686','100000000295112529','100000000295112806','100000000295112445','100000000295112760','100000000295112799','100000000295112632','100000000295112666','100000000295112778','100000000295112770','100000000295112521','100000000295112892','100000000295112589','100000000295112555','100000000295112751','100000000295112858','100000000295112694','100000000295112558','100000000295112734','100000000295112514','100000000295112774','100000000295112768','100000000295112475','100000000295112740','100000000295112496','100000000295112797','100000000295112450','100000000295112859','100000000295112527','100000000295112855','100000000295112856','100000000295112672','100000000295112826','100000000295112902','100000000295112906','100000000295112693','100000000295112874','100000000295112495','100000000295112745','100000000295112683','100000000295112599','100000000295112779','100000000295112900','100000000295112818','100000000295112835','100000000295112840','100000000295112703','100000000295112741','100000000295112834','100000000295112692','100000000295112795','100000000295112829','100000000295112513','100000000295112677','100000000295112749','100000000295112777','100000000295112912','100000000295112808','100000000295112500','100000000295112480','100000000295112520','100000000295112601','100000000295112863','100000000295112577','100000000295112584','100000000295112868','100000000295112604','100000000295112761','100000000295112535','100000000295112814','100000000295112657','100000000295112551','100000000295112707','100000000295112764','100000000295112636','100000000295112709','100000000295112877','100000000295112595','100000000295112451','100000000295112903','100000000295112730','100000000295112603','100000000295112567','100000000295112628','100000000295112688','100000000295112663','100000000295112471','100000000295112866','100000000295112463','100000000295112623','100000000295112621','100000000295112723','100000000295102593','100000000295112882','100000000295112726','100000000295112546','100000000295102591','100000000295112518','100000000295112687','100000000295112940','100000000295112830','100000000295112819','100000000295112897','100000000295112473','100000000295112614','100000000295112624','100000000295112813','100000000295112930','100000000295112454','100000000295112679','100000000295112449','100000000295112579','100000000295112602','100000000295112465','100000000295112705','100000000295112665','100000000295112786','100000000295112676','100000000295112824','100000000295112659','100000000295112697','100000000295112559','100000000295112763','100000000295112568','100000000295112842','100000000295112516','100000000295112781','100000000295112524','100000000295112833','100000000295112908','100000000295112549','100000000295112753','100000000295112444','100000000295112581','100000000295112851','100000000295112838','100000000295112803','100000000295112523','100000000295112767','100000000295102590','100000000295112878','100000000295112927','100000000295112590','100000000295112664','100000000295112756','100000000295112618','100000000295112747','100000000295112658','100000000295112507','100000000295112481','100000000295112689','100000000295112853','100000000295112924','100000000295112721','100000000295112869','100000000295112588','100000000295112772','100000000295112519','100000000295112888','100000000295112738','100000000295112732','100000000295112487','100000000295112522','100000000295112702','100000000295112591','100000000295112673','100000000295112928','100000000295112625','100000000295112594','100000000295112704','100000000295112791','100000000295112517','100000000295112468','100000000295112469','100000000295112464','100000000295112917','100000000295112875','100000000295112615','100000000295112456','100000000295102592','100000000295112923','100000000295112553','100000000295112725','100000000295112710','100000000295112887','100000000295112534','100000000295112627','100000000295112800','100000000295112565','100000000295102589','100000000295112583','100000000295112823','100000000295112773','100000000295112586','100000000295112885','100000000295112574','100000000295112857','100000000295112909','100000000295112562','100000000295112708','100000000295112783','100000000295112913','100000000295112569','100000000295112816','100000000295112542','100000000295112608','100000000295112566','100000000295112910','100000000295112682','100000000295102588','100000000295112504','100000000295112472','100000000295112899','100000000295112861','100000000295112712','100000000295112447','100000000295112547','100000000295112695','100000000295112820','100000000295112789','100000000295112629','100000000295112762','100000000295112552','100000000295112690','100000000295112937','100000000295112622','100000000295112512','100000000295112942','100000000295112606','100000000295112828','100000000295112790','100000000295112494','100000000295112631','100000000295112525','100000000295112714','100000000295112904','100000000295112501','100000000295112748','100000000295112545','100000000295112787','100000000295112669','100000000295112881','100000000295112489','100000000295112598','100000000295112597','100000000295112933','100000000295112793','100000000295112932','100000000295112536','100000000295112585','100000000295112766','100000000295112680','100000000295112691','100000000295112457','100000000295112639','100000000295112805','100000000295112815','100000000295112573','100000000295112895','100000000295112889','100000000295112550','100000000295112515','100000000295112755','100000000295112864','100000000295112554','100000000295112879','100000000295112484','100000000295112479','100000000295112466','100000000295112862','100000000295112901','100000000295112596','100000000295112452','100000000295112532','100000000295112684','100000000295112731','100000000295112807','100000000295112467','100000000295112607','100000000295112919','100000000295112724','100000000295112575','100000000295112867','100000000295112931','100000000295112638','100000000295112839','100000000295112630','100000000295112914','100000000295112667','100000000295112792','100000000295112641','100000000295112526','100000000295112580','100000000295112926','100000000295112502','100000000295112883','100000000295112490','100000000295112860','100000000295112713','100000000295112719','100000000295112538','100000000295112509','100000000295112837','100000000295112617','100000000295112720','100000000295112642','100000000295112832','100000000295112918','100000000295112497','100000000295112571','100000000295112635','100000000295112743','100000000295112893','100000000295112477','100000000295112782','100000000295112592','100000000295112633','100000000295112541','100000000295112775','100000000295112616','100000000295112744','100000000295112715','100000000295112836','100000000295112880','100000000295112605','100000000295112455','100000000295112922','100000000295112485','100000000295112894','100000000295112674','100000000295102586','100000000295112443','100000000295112758','100000000295112929','100000000295112739','100000000295112827')
	</select>
	
	<select id="selectLoanOrderCompanyUserBaseInfo" parameterType="String" resultType="com.nj.model.generate.NjBaseInfoCompany">
        SELECT
			c.*
		FROM
			nj_loan_order a
		INNER JOIN nj_order_base_info_company b ON a.id = b.order_id
		INNER JOIN nj_base_info_company c ON b.base_info_company_id = c.id
		WHERE a.id = #{orderId}
    </select>
    
    <select id="selectLoanOrderCompanyUserBaseInfoMap" parameterType="String" resultType="java.util.Map">
        SELECT
			c.*
			,dict.label_text
		FROM
			nj_loan_order a
		INNER JOIN nj_order_base_info_company b ON a.id = b.order_id
		INNER JOIN nj_base_info_company c ON b.base_info_company_id = c.id
		LEFT JOIN sys_dict dict ON dict.`value` = c.own_industry AND dict.type = 'SSHY'
		WHERE a.id = #{orderId}
    </select>
    
    <select id="getContactCompanyInfoByOrderId" parameterType="String" resultType="com.nj.model.generate.NjContactCompany">
       SELECT
			c.*
		FROM
			nj_loan_order a
		INNER JOIN nj_order_contact_company b ON a.id = b.order_id
		INNER JOIN nj_contact_company c ON b.nj_contact_company_id = c.id
		WHERE a.id = #{orderId}
    </select>
    
    
     <select id="getScenesCompanyInfoByOrderId" parameterType="String" resultType="com.nj.model.generate.NjScenesCompany">
        SELECT
			c.*
		FROM
			nj_loan_order a
		INNER JOIN nj_order_scenes_company b ON a.id = b.order_id
		INNER JOIN nj_scenes_company c ON b.nj_scenes_company_id = c.id
		WHERE a.id = #{orderId}
    </select>
    
     <select id="getContactCompanyInfoByOrderIdMap" parameterType="String" resultType="java.util.Map">
        SELECT
			c.*
		FROM
			nj_loan_order a
		INNER JOIN nj_order_contact_company b ON a.id = b.order_id
		INNER JOIN nj_contact_company c ON b.nj_contact_company_id = c.id
		WHERE a.id = #{orderId}
    </select>
    
    
     <select id="getScenesCompanyInfoByOrderIdMap" parameterType="String" resultType="java.util.Map">
        SELECT
			c.*
		FROM
			nj_loan_order a
		INNER JOIN nj_order_scenes_company b ON a.id = b.order_id
		INNER JOIN nj_scenes_company c ON b.nj_scenes_company_id = c.id
		WHERE a.id = #{orderId}
    </select>
    
    <select id="selectExportList" parameterType="java.util.Map" resultType="java.util.Map">
    	SELECT
			make_loans_date as makeLoansDate,
			GROUP_CONCAT(order_no) as orderNos
		FROM
			nj_loan_order
		WHERE
		status in (12,99)
		<if test="companyId != null">
			and company_id = #{companyId}
		</if>
		AND make_loans_date BETWEEN #{beginDate}
		AND #{endDate}
		GROUP BY
			date_format(make_loans_date, '%Y-%m');
		    	
    </select>
    
    <!-- 获取百行上报请求参数数据 -->
    <select id="getBhReportInfo" resultType="java.util.Map">
    	SELECT
			b.true_name as name,
			b.identify_id as pid,
			b.mobile,
			c.guarantee_type as guaranteeType,
			a.usage_id as loanPurpose,
			a.amount as applyAmount, 
			a.order_no as loanId,
			a.id as orderId,
			a.create_date,
			d.compan_code as companyCode,
			b.address as homeAddress,
			f.org_name as workName,
			f.org_address as workAddress
		FROM
			nj_loan_order a
		INNER JOIN nj_app_user b ON a.user_id = b.id
		INNER JOIN nj_product c ON a.product_id = c.id
		INNER JOIN nj_coporate d ON a.company_id = d.id
		LEFT JOIN nj_order_work e ON e.order_id = a.id
		LEFT JOIN nj_user_work_info f ON e.work_id = f.id
		WHERE
			a.id = #{orderId}
    </select>
    
    <!-- 获取百行上报请求参数数据 -->
    <update id="updateBhReportStatus">
    	UPDATE 
    		nj_order_bh_record
		SET 
			`status` = 1
			,report_date = NOW()
		WHERE
			order_id = #{orderId}
		AND 
			`status` = 0
    </update>
    
    <select id="selectBhReportList" resultType="com.nj.model.generate.NjOrderBhRecord">
    	SELECT
			a.order_id
		FROM
			nj_order_bh_record a
		INNER JOIN nj_loan_order b ON a.order_id = b.id
		INNER JOIN nj_product c ON b.product_id = c.id
		AND c.open_product_id IN ('P20000','10096','10084','10083','P20002')
		WHERE a.`status` = 0
		AND a.create_date > date_sub(curdate(),interval 7 day);
    </select>
    
    <select id="selectPhUserAttachmentList" resultType="com.nj.model.generate.NjUserAttachment">
    	SELECT
			id,file_path
		FROM
			nj_user_attachment
		WHERE
			source IS NOT NULL
			 AND length(file_path) - length(substring_index(file_path,'http://',1)) >0
		LIMIT 10
    </select>
    <select id="getInfoByOrderNo" resultType="java.util.Map">
    	SELECT
			c.open_product_id as borrowType,
			b.mobile as userMobile,
			b.true_name as userName,
			b.identify_id as userIdentity
		FROM
			nj_loan_order a
		INNER JOIN nj_app_user b ON a.user_id = b.id
		INNER JOIN nj_product c ON a.product_id = c.id
		WHERE
			a.order_no = #{orderNo}
    </select>
</mapper>